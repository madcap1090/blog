<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bad to the code</title>
    <link>/</link>
    <description>Recent content on bad to the code</description>
    <generator>Hugo - gohugo.io</generator>
    <language>en</language>
    <contact>madcap1090@gmail.com</contact>
    <copyright>&copy; <a href="https://github.com/madcap1090">William Bourgeois</a> 2019</copyright>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>happy faces in a bucket</title>
      <link>/post/happy-faces-in-a-bucket/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      <author>William Bourgeois</author>
      <guid>/post/happy-faces-in-a-bucket/</guid>
      <description></description>
      
      <content>


&lt;p&gt;Remember we downloaded the pictures of our parliamentarians and made a patchwork with them? I looked for a while how to analyse them for gender, age and skin color. One obvious candidate was Rekognition from AWS if only because the instances at my workplace decided to use AWS services. Getting a little bit more familiar with using these seemed therefore like a good choice.&lt;/p&gt;
&lt;p&gt;I searched for R packages to use Rekognition with, but did not find any. So I tried Python‚Äôs Boto3 but could not get the authorisation working. So with a little (a very little ‚Äì promised) help from the new consultants (thank you Fabrice üëç) I set out to use my first scripts on the cloud.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# libraries
library(&amp;quot;tidyverse&amp;quot;)
library(&amp;quot;aws.s3&amp;quot;)
library(&amp;quot;magick&amp;quot;)
library(&amp;quot;aws.s3&amp;quot;)
library(&amp;quot;jsonlite&amp;quot;)
options(Encoding=&amp;quot;UTF-8&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the process I found out Rekognition did not treat gifs, so the pictures need to be converted first to jpgs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;to_move &amp;lt;- list.files(&amp;quot;./data/190417&amp;quot;, pattern = &amp;quot;*.gif&amp;quot;)
file.copy(file.path(&amp;quot;./data/190417&amp;quot;, to_move), &amp;quot;./data/20190511&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Returns TRUE and TRUE is good. TRUE will set you free. We can convert them with the magick package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;convert_ye &amp;lt;- function(gif){
  pic &amp;lt;- image_read(gif)
  name &amp;lt;- str_remove(gif,&amp;quot;.gif&amp;quot;)
  
  image_write(pic, path = paste0(&amp;quot;./jpg/&amp;quot;,name,&amp;quot;.jpg&amp;quot;), format = &amp;quot;jpg&amp;quot;)
}

heathens &amp;lt;- list.files(&amp;quot;./data/20190511&amp;quot;, pattern = &amp;quot;*.gif&amp;quot;, full.names = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;convert_ye(heathens)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Returns;
Error in magick_image_readpath(path, density, depth, strip) : Magick: UnableToOpenBlob `C:\20190511V√É¬©ronique.gif‚Äô: No such file or directory @ error/blob.c/OpenBlob/2701&lt;/p&gt;
&lt;p&gt;In encoding hell again. √É¬©√É¬©√É¬©√É¬©! The heathens cannot be converted. Can‚Äôt really find a way to solve this. Last time we just gave the files numbers. We can do that again, but now we will keep the names for future use. Or we can try to replace it just for the magick package and change it again once we have the jpgs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;heathens &amp;lt;- list.files(&amp;quot;./data/20190511&amp;quot;)

setwd(&amp;quot;./data/20190511&amp;quot;)
dir.create(file.path(&amp;quot;jpg&amp;quot;), showWarnings = FALSE)
for(i in (1:length(heathens))){
  # print(headens[i])
  file.rename(from = heathens[i], paste0(i,&amp;quot;.gif&amp;quot;))
  pic &amp;lt;- image_read(paste0(i, &amp;quot;.gif&amp;quot;))
  name &amp;lt;- str_remove(heathens[i],&amp;quot;.gif&amp;quot;)
  image_write(pic, path = paste0(&amp;quot;./jpg/&amp;quot;,name,&amp;quot;.jpg&amp;quot;), format = &amp;quot;jpg&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That seemed to work.&lt;/p&gt;
&lt;p&gt;In comes AWS. We will upload these to a bucket S3. It is important that the bucket is in the same Amazon Region as your stagemaker instance. I wrote ‚Äòinstance‚Äô because it sounds good, I don‚Äôt know if it really means something though. But it sounds like a cloud computing word to use.&lt;/p&gt;
&lt;p&gt;The auhentication can be done like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;AWSAccessKeyId &amp;lt;- &amp;quot;secret&amp;quot;
AWSSecretKey &amp;lt;- &amp;quot;secret&amp;quot;
region &amp;lt;- &amp;quot;eu-west-3&amp;quot;

Sys.setenv(&amp;quot;AWS_ACCESS_KEY_ID&amp;quot; = AWSAccessKeyId,
           &amp;quot;AWS_SECRET_ACCESS_KEY&amp;quot; = AWSSecretKey,
           &amp;quot;AWS_DEFAULT_REGION&amp;quot; = region,
           &amp;quot;AWS_SESSION_TOKEN&amp;quot; = &amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Creating a bucket (in Ireland).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;put_bucket(&amp;quot;reps666&amp;quot;, region = &amp;quot;eu-west-1&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then uploading the pictures to a bucket.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;put_object(&amp;quot;./data/20190511/jpg/Almaci Meyrem.jpg&amp;quot;, bucket = &amp;quot;reps666&amp;quot;, 
           object = &amp;quot;Almaci Meyrem.jpg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Returnes TRUE. TRUE is good, it will set you free.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;delete_object(object = &amp;quot;Almaci Meyrem.jpg&amp;quot;,bucket = &amp;quot;reps666&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Returns TRUE. Repeat after me, TRUE is‚Ä¶&lt;/p&gt;
&lt;p&gt;I‚Äôm still having problems with encodings, hope you have not, but will change the names to digits and convert them back to names later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;files &amp;lt;- list.files(&amp;quot;./data/20190511/jpg&amp;quot;)
files_full &amp;lt;- list.files(&amp;quot;./data/20190511/jpg&amp;quot;,full.names = TRUE )
for(i in (1:length(files))){
    file.rename(from = files_full[i], paste0(&amp;quot;./data/20190511/jpg/&amp;quot;,i,&amp;quot;.jpg&amp;quot;))
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now uploading the files to the bucket.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;files_full &amp;lt;- list.files(&amp;quot;./data/20190511/jpg&amp;quot;,full.names = TRUE )
for(i in (1:length(files))){
    put_object(files_full[i], bucket = &amp;quot;reps666&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we have the pictures in a bucket s3 with digits instead of names, or as names, but at least they are there, on our cloud.&lt;/p&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/20190511/Management%20Console.jpg&#34; alt=&#34;aws console&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;aws console&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;Next we can create a notebook instance on Sagemaker and start it up.&lt;/p&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/20190511/Amazon%20SageMaker.jpg&#34; alt=&#34;aws sagemaker&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;aws sagemaker&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;We can use boto3 to apply rekognition to our files (boto3 is üêç) :&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import boto3
import json
s3 = boto3.resource(&amp;#39;s3&amp;#39;)
rekognition = boto3.client(&amp;quot;rekognition&amp;quot;, &amp;quot;eu-west-1&amp;quot;)
my_bucket = s3.Bucket(&amp;#39;reps666&amp;#39;)
for object in my_bucket.objects.all():
    name = object.key[0:-4] 
    print(object.key[0:-4])
    print(name)
    BUCKET = &amp;#39;reps666&amp;#39;
    KEY = object.key
    response = rekognition.detect_faces(
    Image={
        
        &amp;#39;S3Object&amp;#39;: {
            &amp;#39;Bucket&amp;#39;: BUCKET,
            &amp;#39;Name&amp;#39;: KEY,
        }
    },
    Attributes=[
        &amp;#39;ALL&amp;#39;,
    ]
    )
    with open(object.key[0:-4]+&amp;quot;.json&amp;quot;, &amp;#39;w&amp;#39;) as json_file:
        json.dump(response, json_file)
    boto3.Session().resource(&amp;#39;s3&amp;#39;)\
    .Bucket(&amp;#39;jsonmad&amp;#39;).Object(object.key[0:-4]+&amp;quot;.json&amp;quot;)\
    .upload_file(object.key[0:-4]+&amp;quot;.json&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pardon my python.&lt;/p&gt;
&lt;p&gt;The code goes through the files in the bucket, applies ‚Äòdetect_faces‚Äô from rekognize through boto3, saves the output
(in json) and sends it to another bucket.&lt;/p&gt;
&lt;p&gt;Next we can check that the json files safely arrived in their bucket (jsonmad), commit and push the lastets changes to the code and stop the notebook instance on Sagemaker.&lt;/p&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/20190511/JupyterLab.jpg&#34; alt=&#34;jupyterlab&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;jupyterlab&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bucket_content &amp;lt;- get_bucket_df(bucket = &amp;quot;jsonmad&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# saveRDS(bucket_content, &amp;quot;./data/20190511/bucket_content.rds&amp;quot;)
bucket_content &amp;lt;-readRDS(&amp;quot;./data/20190511/bucket_content.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(bucket_content)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    179 obs. of  8 variables:
##  $ Key              : chr  &amp;quot;1.json&amp;quot; &amp;quot;10.json&amp;quot; &amp;quot;100.json&amp;quot; &amp;quot;101.json&amp;quot; ...
##  $ LastModified     : chr  &amp;quot;2019-05-12T11:45:07.000Z&amp;quot; &amp;quot;2019-05-12T11:45:07.000Z&amp;quot; &amp;quot;2019-05-12T11:45:08.000Z&amp;quot; &amp;quot;2019-05-12T11:45:08.000Z&amp;quot; ...
##  $ ETag             : chr  &amp;quot;\&amp;quot;6a7cb098674c1d5ab5fd66e66a031877\&amp;quot;&amp;quot; &amp;quot;\&amp;quot;36dd7f55e1db511dc3f4fabaf517492f\&amp;quot;&amp;quot; &amp;quot;\&amp;quot;0afacabc6c5ae4bea7da8116285bfb88\&amp;quot;&amp;quot; &amp;quot;\&amp;quot;42b33b346a37a50a8e832d6f0e875531\&amp;quot;&amp;quot; ...
##  $ Size             : chr  &amp;quot;3886&amp;quot; &amp;quot;3886&amp;quot; &amp;quot;3902&amp;quot; &amp;quot;3891&amp;quot; ...
##  $ Owner_ID         : chr  &amp;quot;5c61b42d25c8ca6f8e818c7f78a69aaf2b99c91751b1d155178b5f72a88b84fd&amp;quot; &amp;quot;5c61b42d25c8ca6f8e818c7f78a69aaf2b99c91751b1d155178b5f72a88b84fd&amp;quot; &amp;quot;5c61b42d25c8ca6f8e818c7f78a69aaf2b99c91751b1d155178b5f72a88b84fd&amp;quot; &amp;quot;5c61b42d25c8ca6f8e818c7f78a69aaf2b99c91751b1d155178b5f72a88b84fd&amp;quot; ...
##  $ Owner_DisplayName: chr  &amp;quot;madcap1090&amp;quot; &amp;quot;madcap1090&amp;quot; &amp;quot;madcap1090&amp;quot; &amp;quot;madcap1090&amp;quot; ...
##  $ StorageClass     : chr  &amp;quot;STANDARD&amp;quot; &amp;quot;STANDARD&amp;quot; &amp;quot;STANDARD&amp;quot; &amp;quot;STANDARD&amp;quot; ...
##  $ Bucket           : chr  &amp;quot;jsonmad&amp;quot; &amp;quot;jsonmad&amp;quot; &amp;quot;jsonmad&amp;quot; &amp;quot;jsonmad&amp;quot; ...
##  - attr(*, &amp;quot;Marker&amp;quot;)= list()
##  - attr(*, &amp;quot;IsTruncated&amp;quot;)= chr &amp;quot;false&amp;quot;
##  - attr(*, &amp;quot;MaxKeys&amp;quot;)= chr &amp;quot;1000&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (i in (1:nrow(bucket_content))){
  name &amp;lt;- str_remove(bucket_content$Key[i], &amp;quot;.json&amp;quot;) 
  #print(name)
  #print(bucket_content$Key[i])
  save_object(bucket_content$Key[i], bucket = &amp;quot;jsonmad&amp;quot;, 
              file = paste0(&amp;quot;./data/20190511/json/&amp;quot;,
                            bucket_content$Key[i]))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So they landed safely at home on my hardrive. Let‚Äôs look at one. Hi there Mr N¬∞50.&lt;/p&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/20190511/50.gif&#34; alt=&#34;Mr N¬∞50&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Mr N¬∞50&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;And here is his face analysis data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;json_file_sample &amp;lt;- read_json(&amp;quot;./data/20190511/json/50.json&amp;quot;)
str(json_file_sample[[&amp;quot;FaceDetails&amp;quot;]][[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 15
##  $ BoundingBox:List of 4
##   ..$ Width : num 0.6
##   ..$ Height: num 0.629
##   ..$ Left  : num 0.217
##   ..$ Top   : num 0.191
##  $ AgeRange   :List of 2
##   ..$ Low : int 45
##   ..$ High: int 66
##  $ Smile      :List of 2
##   ..$ Value     : logi FALSE
##   ..$ Confidence: num 67
##  $ Eyeglasses :List of 2
##   ..$ Value     : logi TRUE
##   ..$ Confidence: num 95.2
##  $ Sunglasses :List of 2
##   ..$ Value     : logi FALSE
##   ..$ Confidence: num 93
##  $ Gender     :List of 2
##   ..$ Value     : chr &amp;quot;Male&amp;quot;
##   ..$ Confidence: num 96.8
##  $ Beard      :List of 2
##   ..$ Value     : logi FALSE
##   ..$ Confidence: num 96.7
##  $ Mustache   :List of 2
##   ..$ Value     : logi FALSE
##   ..$ Confidence: num 99.5
##  $ EyesOpen   :List of 2
##   ..$ Value     : logi TRUE
##   ..$ Confidence: num 100
##  $ MouthOpen  :List of 2
##   ..$ Value     : logi TRUE
##   ..$ Confidence: num 95.1
##  $ Emotions   :List of 7
##   ..$ :List of 2
##   .. ..$ Type      : chr &amp;quot;ANGRY&amp;quot;
##   .. ..$ Confidence: num 27.6
##   ..$ :List of 2
##   .. ..$ Type      : chr &amp;quot;DISGUSTED&amp;quot;
##   .. ..$ Confidence: num 21.5
##   ..$ :List of 2
##   .. ..$ Type      : chr &amp;quot;SURPRISED&amp;quot;
##   .. ..$ Confidence: num 11.2
##   ..$ :List of 2
##   .. ..$ Type      : chr &amp;quot;SAD&amp;quot;
##   .. ..$ Confidence: num 2.28
##   ..$ :List of 2
##   .. ..$ Type      : chr &amp;quot;CALM&amp;quot;
##   .. ..$ Confidence: num 10.9
##   ..$ :List of 2
##   .. ..$ Type      : chr &amp;quot;CONFUSED&amp;quot;
##   .. ..$ Confidence: num 17.6
##   ..$ :List of 2
##   .. ..$ Type      : chr &amp;quot;HAPPY&amp;quot;
##   .. ..$ Confidence: num 8.97
##  $ Landmarks  :List of 30
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;eyeLeft&amp;quot;
##   .. ..$ X   : num 0.402
##   .. ..$ Y   : num 0.423
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;eyeRight&amp;quot;
##   .. ..$ X   : num 0.667
##   .. ..$ Y   : num 0.438
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;mouthLeft&amp;quot;
##   .. ..$ X   : num 0.406
##   .. ..$ Y   : num 0.635
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;mouthRight&amp;quot;
##   .. ..$ X   : num 0.626
##   .. ..$ Y   : num 0.648
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;nose&amp;quot;
##   .. ..$ X   : num 0.531
##   .. ..$ Y   : num 0.539
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;leftEyeBrowLeft&amp;quot;
##   .. ..$ X   : num 0.301
##   .. ..$ Y   : num 0.37
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;leftEyeBrowRight&amp;quot;
##   .. ..$ X   : num 0.465
##   .. ..$ Y   : num 0.362
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;leftEyeBrowUp&amp;quot;
##   .. ..$ X   : num 0.386
##   .. ..$ Y   : num 0.347
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;rightEyeBrowLeft&amp;quot;
##   .. ..$ X   : num 0.621
##   .. ..$ Y   : num 0.371
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;rightEyeBrowRight&amp;quot;
##   .. ..$ X   : num 0.774
##   .. ..$ Y   : num 0.397
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;rightEyeBrowUp&amp;quot;
##   .. ..$ X   : num 0.7
##   .. ..$ Y   : num 0.365
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;leftEyeLeft&amp;quot;
##   .. ..$ X   : num 0.354
##   .. ..$ Y   : num 0.419
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;leftEyeRight&amp;quot;
##   .. ..$ X   : num 0.453
##   .. ..$ Y   : num 0.427
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;leftEyeUp&amp;quot;
##   .. ..$ X   : num 0.402
##   .. ..$ Y   : num 0.412
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;leftEyeDown&amp;quot;
##   .. ..$ X   : num 0.402
##   .. ..$ Y   : num 0.431
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;rightEyeLeft&amp;quot;
##   .. ..$ X   : num 0.61
##   .. ..$ Y   : num 0.436
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;rightEyeRight&amp;quot;
##   .. ..$ X   : num 0.707
##   .. ..$ Y   : num 0.439
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;rightEyeUp&amp;quot;
##   .. ..$ X   : num 0.664
##   .. ..$ Y   : num 0.427
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;rightEyeDown&amp;quot;
##   .. ..$ X   : num 0.66
##   .. ..$ Y   : num 0.446
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;noseLeft&amp;quot;
##   .. ..$ X   : num 0.475
##   .. ..$ Y   : num 0.562
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;noseRight&amp;quot;
##   .. ..$ X   : num 0.572
##   .. ..$ Y   : num 0.567
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;mouthUp&amp;quot;
##   .. ..$ X   : num 0.519
##   .. ..$ Y   : num 0.615
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;mouthDown&amp;quot;
##   .. ..$ X   : num 0.512
##   .. ..$ Y   : num 0.678
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;leftPupil&amp;quot;
##   .. ..$ X   : num 0.402
##   .. ..$ Y   : num 0.423
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;rightPupil&amp;quot;
##   .. ..$ X   : num 0.667
##   .. ..$ Y   : num 0.438
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;upperJawlineLeft&amp;quot;
##   .. ..$ X   : num 0.22
##   .. ..$ Y   : num 0.423
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;midJawlineLeft&amp;quot;
##   .. ..$ X   : num 0.26
##   .. ..$ Y   : num 0.654
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;chinBottom&amp;quot;
##   .. ..$ X   : num 0.498
##   .. ..$ Y   : num 0.789
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;midJawlineRight&amp;quot;
##   .. ..$ X   : num 0.736
##   .. ..$ Y   : num 0.68
##   ..$ :List of 3
##   .. ..$ Type: chr &amp;quot;upperJawlineRight&amp;quot;
##   .. ..$ X   : num 0.813
##   .. ..$ Y   : num 0.456
##  $ Pose       :List of 3
##   ..$ Roll : num 2.95
##   ..$ Yaw  : num 2.22
##   ..$ Pitch: num -8.8
##  $ Quality    :List of 2
##   ..$ Brightness: num 81.1
##   ..$ Sharpness : num 83.1
##  $ Confidence : num 100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs put all of the json files in a data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setwd(&amp;quot;./data/20190511/json/&amp;quot;)
files &amp;lt;- list.files()
faces_reps &amp;lt;- data.frame()
for (i in (1: length(files))){
x &amp;lt;- read_json(files[i])
#print(files[i])
y &amp;lt;- as.data.frame(x$FaceDetails)
number &amp;lt;- str_remove(as.character(files[i]),&amp;quot;.json&amp;quot;)
y &amp;lt;- cbind(y, number)
faces_reps &amp;lt;- rbind(faces_reps, y)
}

dim(faces_reps)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 179 133&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks like they are all there, but we lost their names along the way.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;to_name &amp;lt;- list.files(&amp;quot;./data/190417&amp;quot;, pattern = &amp;quot;*.gif&amp;quot;) %&amp;gt;% 
  str_remove(&amp;quot;.gif&amp;quot;)
ln_fn &amp;lt;- data.frame(&amp;quot;number&amp;quot; = 1:179,
                    &amp;quot;ln_fn&amp;quot; = to_name)

faces_reps$number &amp;lt;- as.integer(faces_reps$number)
x &amp;lt;- faces_reps %&amp;gt;% 
  left_join(ln_fn)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;number&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#saveRDS(faces_reps,&amp;quot;./data/20190511/faces.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et voil√†. A nice data frame to have fun with. üòÑ&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Belgian parliamentarians tweets</title>
      <link>/post/belgian-parliamentarians-tweets/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      <author>William Bourgeois</author>
      <guid>/post/belgian-parliamentarians-tweets/</guid>
      <description></description>
      
      <content>


&lt;p&gt;In the last post we were pretty successful in getting our parliamentarians Twitter handles. We can now use these to download their tweets.&lt;/p&gt;
&lt;p&gt;The twitter API allows to download 3200 tweets per handle. This means that we will not be able to download all tweets of all parliamentarians from the last five years, because some of them tweeted more than 3200 during that time period. But there will be a fair amount.&lt;/p&gt;
&lt;p&gt;These tweets will also have to be ‚Äòcleaned‚Äô of special characters like emojis and links in order to analyse them further without the different packages choking on them.&lt;/p&gt;
&lt;p&gt;As usually first the libraries and options:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;tidyverse&amp;quot;)
library(&amp;quot;gmp&amp;quot;)
library(&amp;quot;glue&amp;quot;)
library(&amp;quot;rtweet&amp;quot;)
library(&amp;quot;cld2&amp;quot;) 
library(&amp;quot;textcat&amp;quot;)
library(&amp;quot;qdapRegex&amp;quot;)
library(&amp;quot;xml2&amp;quot;)
library(&amp;quot;rvest&amp;quot;)
library(&amp;quot;lubridate&amp;quot;)

# options 

options(scipen=999)
stringAsFactors = FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is the function to get the tweets (for now just 1 for testing, because 3200 tweets takes a while):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_handle_tweets &amp;lt;- function(handle) {
  tweets_handle &amp;lt;&amp;lt;- get_timeline(handle, n=1)
  n &amp;lt;- nrow(tweets_handle)
    print(glue(&amp;quot;{handle} {n} tweets added&amp;quot;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And a function to clean the tweets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;to_byte &amp;lt;- function (x) {
  Encoding(x) &amp;lt;- &amp;quot;latin1&amp;quot;
  iconv(x, &amp;quot;latin1&amp;quot;, &amp;quot;ASCII&amp;quot;, &amp;quot;byte&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the handles:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;twitter_users &amp;lt;- readRDS(&amp;quot;~/R/blogs/content/post/data/20190502/twitter_users.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A test&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;twitter_users$screen_name[3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;SonjaBecq&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It‚Äôs not strictly needed since we already know the correspondence between name and handle (‚Äòscreen_name‚Äô), but it‚Äôs fun to try map2_df. A test with two tweets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_handle_tweets &amp;lt;- function(screen_name, ln_fn) {
  get_timeline(screen_name, n=2) %&amp;gt;% 
    mutate(ln_fn = ln_fn)
}

tweets &amp;lt;- map2_df(twitter_users$screen_name,twitter_users$ln_fn, 
             possibly(get_handle_tweets, otherwise = NULL))
dim(tweets)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 315  89&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now might be a good time to talk about rate limits. We are limited to go 3200 tweets in the past per handle, but we have also temporary limits to the calls we can do with the API.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;limits &amp;lt;- rate_limits()
head(limits)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##   query limit remaining reset reset_at            timestamp           app  
##   &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;tim&amp;gt; &amp;lt;dttm&amp;gt;              &amp;lt;dttm&amp;gt;              &amp;lt;chr&amp;gt;
## 1 list~    15        15 15.0~ 2019-05-12 18:02:01 2019-05-12 17:47:01 madc~
## 2 list~    75        75 15.0~ 2019-05-12 18:02:01 2019-05-12 17:47:01 madc~
## 3 list~    15        15 15.0~ 2019-05-12 18:02:01 2019-05-12 17:47:01 madc~
## 4 list~   900       900 15.0~ 2019-05-12 18:02:01 2019-05-12 17:47:01 madc~
## 5 list~    15        15 15.0~ 2019-05-12 18:02:01 2019-05-12 17:47:01 madc~
## 6 list~    75        75 15.0~ 2019-05-12 18:02:01 2019-05-12 17:47:01 madc~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In total there are 149 limits, we can access, among other things, how much remains and when the limit will be reset. Here are some of the limits:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(limits$query, 20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;lists/list&amp;quot;                    &amp;quot;lists/memberships&amp;quot;            
##  [3] &amp;quot;lists/subscribers/show&amp;quot;        &amp;quot;lists/members&amp;quot;                
##  [5] &amp;quot;lists/subscriptions&amp;quot;           &amp;quot;lists/show&amp;quot;                   
##  [7] &amp;quot;lists/ownerships&amp;quot;              &amp;quot;lists/subscribers&amp;quot;            
##  [9] &amp;quot;lists/members/show&amp;quot;            &amp;quot;lists/statuses&amp;quot;               
## [11] &amp;quot;application/rate_limit_status&amp;quot; &amp;quot;mutes/users/list&amp;quot;             
## [13] &amp;quot;mutes/users/ids&amp;quot;               &amp;quot;live_video_stream/status/:id&amp;quot; 
## [15] &amp;quot;friendships/outgoing&amp;quot;          &amp;quot;friendships/list&amp;quot;             
## [17] &amp;quot;friendships/no_retweets/ids&amp;quot;   &amp;quot;friendships/lookup&amp;quot;           
## [19] &amp;quot;friendships/incoming&amp;quot;          &amp;quot;friendships/show&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point we need to keep an eye on limits tweets (#49) and limits queries (#11).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;limits %&amp;gt;% select(limit, query, remaining, reset) %&amp;gt;% 
  filter(query ==  &amp;quot;application/rate_limit_status&amp;quot;|
          query ==  &amp;quot;statuses/user_timeline&amp;quot;) %&amp;gt;% 
  mutate(reset = round(reset, 2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 4
##   limit query                         remaining reset     
##   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                             &amp;lt;int&amp;gt; &amp;lt;time&amp;gt;    
## 1   180 application/rate_limit_status        20 13.68 mins
## 2   900 statuses/user_timeline              741 13.68 mins&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are searching 160 users and the rate limit for searching user timelines is 900, so we should be fine. But be aware that your limit searches are limited also (180 searches counted by individual limit in batches of 15 minutes).&lt;/p&gt;
&lt;p&gt;At a certain point in time it might be useful to periodically query certain limits and to then pause the code in order not to produce interruptions.&lt;/p&gt;
&lt;p&gt;How well did our test go? Did we get tweets from everyone?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setdiff(twitter_users$ln_fn, tweets$ln_fn)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## character(0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice. The results look ok too. Will now launch the bigger batch (3200) while out playing some üè∏ and after having waited fifteen minutes to be sure all rate limits were reset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;twitter_users &amp;lt;- twitter_users %&amp;gt;% 
  arrange(screen_name) %&amp;gt;% 
  distinct(screen_name, .keep_all = TRUE) # removing doubles if present

get_handle_tweets &amp;lt;- function(screen_name, ln_fn) {
  print(screen_name) # this can be used to see the advancement
  get_timeline(screen_name, n=3200) %&amp;gt;% 
    mutate(ln_fn = ln_fn)
}

system.time(tweets &amp;lt;- map2_df(twitter_users$screen_name,twitter_users$ln_fn, 
             possibly(get_handle_tweets, otherwise = NULL)))
dim(tweets)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool, so about 265K tweets.&lt;/p&gt;
&lt;p&gt;But as already mentioned these are some of the tweets from people who at some time were in the 54th legislature. They are not always a tweet from a person actually seating in parliament.&lt;/p&gt;
&lt;p&gt;This Wikipedia page &lt;a href=&#34;https://nl.Wikipedia.org/wiki/Kamer_van_volksvertegenwoordigers_(samenstelling_2014-2019)&#34; class=&#34;uri&#34;&gt;https://nl.Wikipedia.org/wiki/Kamer_van_volksvertegenwoordigers_(samenstelling_2014-2019)&lt;/a&gt; has a good overview of the changes that occurred since May 2014.&lt;/p&gt;
&lt;p&gt;A few have also changed party or became independent. The table that was used to obtain the list of parliamentarian‚Äôs names, language and party, can be transformed into a reference table that we can join to the tweets for further analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names &amp;lt;- readRDS(&amp;quot;./data/190417/names.rds&amp;quot;)
party_less &amp;lt;- names %&amp;gt;% 
  filter(is.na(party))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The text on the Wikipedia page contains the information that is needed, but I wonder how easy it will be to use. We can try, let‚Äôs see what we get.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url &amp;lt;- &amp;quot;https://nl.Wikipedia.org/wiki/Kamer_van_volksvertegenwoordigers_(samenstelling_2014-2019)&amp;quot; 

wiki_table_source&amp;lt;- url %&amp;gt;% 
  read_html() %&amp;gt;%
  html_node(xpath = &amp;#39;//*[@id=&amp;quot;mw-content-text&amp;quot;]/div/table[4]&amp;#39;)  %&amp;gt;%
  html_table(fill = TRUE)

head(wiki_table_source)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 Volksvertegenwoordiger Fractie Kieskring  Taalgroep
## 1         Almaci, Meyrem Meyrem Almaci   Groen Antwerpen Nederlands
## 2           Bellens, Rita Rita Bellens    N-VA Antwerpen Nederlands
## 3         Calvo, Kristof Kristof Calvo   Groen Antwerpen Nederlands
## 4 De Coninck, Monica Monica De Coninck    sp.a Antwerpen Nederlands
## 5             Demir, Zuhal Zuhal Demir    N-VA Antwerpen Nederlands
## 6     De Roover, Peter Peter De Roover    N-VA Antwerpen Nederlands
##                                                                                                                          Opmerkingen
## 1                                                                                                                               &amp;lt;NA&amp;gt;
## 2                                                                                                                               &amp;lt;NA&amp;gt;
## 3                                                                                                                               &amp;lt;NA&amp;gt;
## 4                                                                                                                               &amp;lt;NA&amp;gt;
## 5 Werd van 9 maart 2017 tot 9 december 2018 als staatssecretaris in de federale regering-Michel I vervangen door Wim Van der Donckt.
## 6                                                                                                                               &amp;lt;NA&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The nice thing is that additional information like the voting district was obtained. Using the comments (‚ÄúOpmerkingen‚Äù), will probably be more time consuming than hard coding the changes, but I think it will be more fun ;-)&lt;/p&gt;
&lt;p&gt;That is if you are interested in data cleaning. If not no need to continue reading this post, because it will be all spring cleaning from now till the end.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wiki_table_source %&amp;gt;% 
  filter(!is.na(Opmerkingen)) %&amp;gt;%
  mutate(Opmerkingen = substr(Opmerkingen,0,100)) %&amp;gt;% 
  select(Opmerkingen) %&amp;gt;% 
  slice(1:7)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                                                            Opmerkingen
## 1 Werd van 9 maart 2017 tot 9 december 2018 als staatssecretaris in de federale regering-Michel I verv
## 2 Werd van 14 oktober 2014 tot 9 december 2018 als minister in de federale regering-Michel I vervangen
## 3                          Vervangt vanaf 19 juni 2014 Marijke Dillen, die beslist om niet te zetelen.
## 4 Vervangt sinds 3 mei 2018 Annemie Turtelboom, die lid wordt van de Europese Rekenkamer. Eerder vervi
## 5                                                       Voorzitter van de Kamer vanaf 14 oktober 2014.
## 6 Vervangt vanaf 10 november 2016 Sarah Claerhout, die uit CD&amp;amp;V stapt en haar zetel aan haar partij te
## 7 Vervangt vanaf 14 oktober 2014 Alexander De Croo, die minister in de federale regering-Michel I werd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‚ÄòVervangt‚Äô means ‚Äòreplaces‚Äô, so these are members that replaced someone who took on another mandate. ‚ÄòWerd‚Äô means ‚Äòwas‚Äô, so these were replaced.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wiki_table &amp;lt;- wiki_table_source %&amp;gt;% 
  filter(!is.na(Opmerkingen)) %&amp;gt;% 
  mutate(first_word = str_extract(Opmerkingen,&amp;quot;(\\w+)&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the comments (Opmerkingen) there are up to three dates that we need. A first step would be to change the month names in numbers. And then extract all the numbers into a list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wiki_table &amp;lt;- wiki_table %&amp;gt;% 
  mutate(Opmerkingen = gsub(&amp;quot;januari&amp;quot;, 1, Opmerkingen),
         Opmerkingen = gsub(&amp;quot;februari&amp;quot;, 2, Opmerkingen),
         Opmerkingen = gsub(&amp;quot;maart&amp;quot;, 3, Opmerkingen),
         Opmerkingen = gsub(&amp;quot;april&amp;quot;, 4, Opmerkingen),
         Opmerkingen = gsub(&amp;quot;mei&amp;quot;, 5, Opmerkingen),
         Opmerkingen = gsub(&amp;quot;juni&amp;quot;, 6, Opmerkingen),
         Opmerkingen = gsub(&amp;quot;juli&amp;quot;, 7, Opmerkingen),
         Opmerkingen = gsub(&amp;quot;augustus&amp;quot;, 8, Opmerkingen),
         Opmerkingen = gsub(&amp;quot;september&amp;quot;, 9, Opmerkingen),
         Opmerkingen = gsub(&amp;quot;oktober&amp;quot;, 10, Opmerkingen),
         Opmerkingen = gsub(&amp;quot;november&amp;quot;, 11, Opmerkingen),
         Opmerkingen = gsub(&amp;quot;december&amp;quot;, 12, Opmerkingen)) %&amp;gt;%
    mutate(digits = str_extract_all(Opmerkingen,&amp;quot;([0-9]+)&amp;quot;)) %&amp;gt;% #&amp;#39;+&amp;#39; keeps them together
  filter(first_word != &amp;quot;De&amp;quot;) # this one has no date 



inspect &amp;lt;-wiki_table$digits
inspect[[20]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;22&amp;quot;   &amp;quot;9&amp;quot;    &amp;quot;2015&amp;quot; &amp;quot;11&amp;quot;   &amp;quot;10&amp;quot;   &amp;quot;2014&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will be more difficult to handle the digits if days and months smaller than 10 do not have a leading 0. So one needs to be added, before concatenating all the numbers&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (i in (1:length(inspect))){
  for (j in (1:length(inspect[[i]]))){
    if (nchar(inspect[[i]][j]) == 1) {inspect[[i]][j] &amp;lt;- paste0(&amp;quot;0&amp;quot;,inspect[[i]][j])}
  }
  inspect[[i]] &amp;lt;- paste0(inspect[[i]], collapse = &amp;quot;&amp;quot;)
  print(inspect[[i]])
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;0903201709122018&amp;quot;
## [1] &amp;quot;1410201409122018&amp;quot;
## [1] &amp;quot;19062014&amp;quot;
## [1] &amp;quot;030520183007201429042016&amp;quot;
## [1] &amp;quot;14102014&amp;quot;
## [1] &amp;quot;1011201614102014&amp;quot;
## [1] &amp;quot;14102014&amp;quot;
## [1] &amp;quot;14032019&amp;quot;
## [1] &amp;quot;24082017&amp;quot;
## [1] &amp;quot;24052018&amp;quot;
## [1] &amp;quot;14102014&amp;quot;
## [1] &amp;quot;06122018&amp;quot;
## [1] &amp;quot;12012017&amp;quot;
## [1] &amp;quot;13122017&amp;quot;
## [1] &amp;quot;19112015&amp;quot;
## [1] &amp;quot;30072014&amp;quot;
## [1] &amp;quot;06122018&amp;quot;
## [1] &amp;quot;28052015&amp;quot;
## [1] &amp;quot;19112015&amp;quot;
## [1] &amp;quot;2209201511102014&amp;quot;
## [1] &amp;quot;09112017&amp;quot;
## [1] &amp;quot;18102018&amp;quot;
## [1] &amp;quot;14102014&amp;quot;
## [1] &amp;quot;23042015&amp;quot;
## [1] &amp;quot;1410201409122018&amp;quot;
## [1] &amp;quot;14102014&amp;quot;
## [1] &amp;quot;14102014&amp;quot;
## [1] &amp;quot;22092710201627102016&amp;quot;
## [1] &amp;quot;300614102014&amp;quot;
## [1] &amp;quot;1410201412112018&amp;quot;
## [1] &amp;quot;22092710201627102016&amp;quot;
## [1] &amp;quot;0410201830072014&amp;quot;
## [1] &amp;quot;14102014&amp;quot;
## [1] &amp;quot;20092018&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# pure poetry if you ask me

con_dates &amp;lt;- data.frame(&amp;quot;condate&amp;quot; = unlist(inspect))
wiki_table &amp;lt;- wiki_table %&amp;gt;% 
  cbind(con_dates) %&amp;gt;% 
  select(-digits)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can extract the dates, but one problem still remains, on Wikipedia some years are not repeated for certain time periods:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wiki_table$Opmerkingen[28]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Zetelt van 22 9 tot 27 10 2016 als onafhankelijke en vanaf 27 10 2016 in de Vuye&amp;amp;Wouters-fractie.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.character(wiki_table$condate[28])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;22092710201627102016&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A little bit more work is needed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wiki_table &amp;lt;- wiki_table %&amp;gt;% 
  mutate(date_1 = 
           ifelse(substr(condate,5,6) == &amp;quot;20&amp;quot;,
                  substr(condate,1,8),
                  paste0(substr(condate,1,4),
                    substr(condate,str_locate(condate, &amp;quot;201&amp;quot;),
                            str_locate(condate, &amp;quot;201&amp;quot;) + 3))
                  )
         ) %&amp;gt;% 
   mutate(date_2 = 
           ifelse(substr(condate,5,6) == &amp;quot;20&amp;quot;,
                  substr(condate,9,16),
                  paste0(
                    substr(condate,str_locate(condate, &amp;quot;201&amp;quot;)-4,
                            str_locate(condate, &amp;quot;201&amp;quot;) + 3))
                  )
         ) %&amp;gt;% 
   mutate(date_3 = 
           ifelse(substr(condate,5,6) == &amp;quot;20&amp;quot;,
                  substr(condate,17,24),
                  &amp;quot;&amp;quot;)
         ) %&amp;gt;% 
  select(-condate)


wiki_table &amp;lt;- wiki_table %&amp;gt;% 
  mutate(date_1 = dmy(as.numeric(date_1)),
         date_2 = dmy(as.numeric(date_2)),
         date_3 = dmy(as.numeric(date_3)),
                )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are other possibilities, but here we will use a table with one line per period a person seated for a party. To later use in the analysis of the tweets collected. In that table there will be one start date and one end date. A good start is assuming everyone started at ‚Äú2014-06-19‚Äù and ended at ‚Äú2019-05-31‚Äù, and then making corrections afterwards.&lt;/p&gt;
&lt;p&gt;We can start by consolidating our tables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setdiff(names(wiki_table),names(wiki_table_source))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;first_word&amp;quot; &amp;quot;date_1&amp;quot;     &amp;quot;date_2&amp;quot;     &amp;quot;date_3&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wiki_table &amp;lt;- wiki_table %&amp;gt;% 
  rbind(wiki_table_source %&amp;gt;% 
          filter(is.na(Opmerkingen) 
                 | Volksvertegenwoordiger == &amp;quot;Jadin, Kattrin Kattrin Jadin&amp;quot;) %&amp;gt;%
          mutate(first_word = &amp;quot;&amp;quot;,
                 date_1 = as.Date(&amp;quot;2001-01-01&amp;quot;),
                 date_2 = as.Date(&amp;quot;2001-01-01&amp;quot;),
                 date_3 = as.Date(&amp;quot;2001-01-01&amp;quot;))
                              )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aw, shoot did not see the names are funky.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(wiki_table$Volksvertegenwoordiger)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Demir, Zuhal Zuhal Demir&amp;quot;                  
## [2] &amp;quot;Jambon, Jan Jan Jambon&amp;quot;                    
## [3] &amp;quot;Penris, Jan Jan Penris&amp;quot;                    
## [4] &amp;quot;Wilrycx, Frank Frank Wilrycx&amp;quot;              
## [5] &amp;quot;Bracke, Siegfried Siegfried Bracke&amp;quot;        
## [6] &amp;quot;Van Peteghem, Vincent Vincent Van Peteghem&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe we can join on the concatenation of letters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- wiki_table %&amp;gt;% 
  mutate(join = str_remove_all(Volksvertegenwoordiger,&amp;quot; &amp;quot;),
         join = str_remove_all(join,&amp;quot;,&amp;quot;),
         join = substr(join,1, nchar(join)/2))

y &amp;lt;- names %&amp;gt;% 
  mutate(join = str_remove_all(ln_fn,&amp;quot; &amp;quot;))

z &amp;lt;- y %&amp;gt;% 
  left_join(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;join&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- z %&amp;gt;% 
  filter(!is.na(Volksvertegenwoordiger)) %&amp;gt;% 
  mutate(test = &amp;quot;test&amp;quot;)
  
missing &amp;lt;- wiki_table %&amp;gt;% 
  left_join(test %&amp;gt;% 
              select(Volksvertegenwoordiger, test)) %&amp;gt;% 
  filter(is.na(test))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;Volksvertegenwoordiger&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;missing$Volksvertegenwoordiger&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Van de Velde, Rob Rob Van de Velde&amp;quot;                  
## [2] &amp;quot;Fernandez-Fernandez, Julie Julie Fernandez-Fernandez&amp;quot;
## [3] &amp;quot;Jirofl√©e, Karine Karine Jirofl√©e&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes I‚Äôve got myself in a pickle again. Three missing. The join field for them should be VandeVeldeRobert, Jirofl√©eKarin and, FernandezFernandezJulie. Instead of VandeVeldeRob, Jirofl√©eKarine and Fernandez-FernandezJulie.&lt;/p&gt;
&lt;p&gt;We can follow how they are spelled on dekamer.be: Robert Van de Velde, Karin Jirofl√©e, Julie Fernandez Fernandez&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x[x$join == &amp;quot;VandeVeldeRob&amp;quot;,]$join &amp;lt;- &amp;quot;VandeVeldeRobert&amp;quot;
x[x$join == &amp;quot;Jirofl√©eKarine&amp;quot;,]$join &amp;lt;- &amp;quot;Jirofl√©eKarin&amp;quot;
x[x$join == &amp;quot;Fernandez-FernandezJulie&amp;quot;,]$join &amp;lt;- &amp;quot;FernandezFernandezJulie&amp;quot;

y &amp;lt;- names %&amp;gt;% 
  mutate(join = str_remove_all(ln_fn,&amp;quot; &amp;quot;))

z &amp;lt;- y %&amp;gt;% 
  left_join(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;join&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- z %&amp;gt;% 
  filter(!is.na(Volksvertegenwoordiger)) %&amp;gt;% 
  mutate(test = &amp;quot;test&amp;quot;)
  
missing &amp;lt;- wiki_table %&amp;gt;% 
  left_join(test %&amp;gt;% 
              select(Volksvertegenwoordiger, test)) %&amp;gt;% 
  filter(is.na(test))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;Volksvertegenwoordiger&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;missing$Volksvertegenwoordiger&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## character(0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeah! So now we have em all we can give em a default start date and a default end date.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reps54 &amp;lt;- z %&amp;gt;% 
  mutate(start_date = as.Date(&amp;quot;2014-06-19&amp;quot;),
         end_date = as.Date(&amp;quot;2019-05-31&amp;quot;)) %&amp;gt;% 
  mutate(fn_ln = trimws(fn_ln, c(&amp;quot;both&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe we can start with those who only have one ‚Äòdate_1‚Äô? Let‚Äôs have a look.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;one_date &amp;lt;- reps54 %&amp;gt;% 
  filter(!is.na(date_1) &amp;amp;
           is.na(date_2))

unique(one_date$first_word)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Voorzitter&amp;quot; &amp;quot;Vanaf&amp;quot;      &amp;quot;Vervangt&amp;quot;   &amp;quot;Zetelt&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‚ÄúVoorzitter‚Äù is the president of the chamber. Not interested in this for now, so no change to be made. ‚ÄúVanaf‚Äù seems to indicate a change of party and/or party name. What happened to the &lt;a href=&#34;https://en.wikipedia.org/wiki/D%C3%A9FI&#34;&gt;FDF&lt;/a&gt;? Seems to have been a name change.&lt;/p&gt;
&lt;p&gt;In the data that come from the official website these members are already ‚ÄòD√©fi‚Äô in the field ‚ÄòParty‚Äô. We can work on the field ‚Äòfractie‚Äô (party) but I doubt it will be needed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fdf &amp;lt;- one_date %&amp;gt;% 
  filter(first_word == &amp;quot;Vanaf&amp;quot;) %&amp;gt;% 
  mutate(end_date = ymd(date_1) -days(1)) %&amp;gt;% 
  rbind(one_date %&amp;gt;% 
          filter(first_word == &amp;quot;Vanaf&amp;quot;) %&amp;gt;% 
          mutate(start_date = date_1,
                 Fractie = &amp;quot;D√©fi&amp;quot;))

one_date &amp;lt;- one_date %&amp;gt;% 
  filter(first_word != &amp;quot;Vanaf&amp;quot;) %&amp;gt;% 
  rbind(fdf)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that takes care of ‚ÄòVanaf‚Äô, now for ‚ÄúVervangt‚Äù (replaces). Which looks pretty straightforward. The date_1 just needs to replace the start date.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;replaces &amp;lt;- one_date %&amp;gt;% 
  filter(first_word == &amp;quot;Vervangt&amp;quot;) %&amp;gt;% 
  mutate(start_date = date_1)

one_date &amp;lt;- one_date %&amp;gt;% 
  filter(first_word != &amp;quot;Vervangt&amp;quot;) %&amp;gt;% 
  rbind(replaces)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case ‚ÄòZetelt‚Äô means the person became independent. I doubt it will make a big difference to make the change for one person, but for the sake of precision, here is the correction.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;zetelt &amp;lt;- one_date %&amp;gt;% 
  filter(first_word == &amp;quot;Zetelt&amp;quot;) %&amp;gt;% 
  mutate(end_date = ymd(date_1) -days(1)) %&amp;gt;% 
  rbind(one_date %&amp;gt;% 
          filter(first_word == &amp;quot;Zetelt&amp;quot;) %&amp;gt;% 
          mutate(start_date = date_1,
                 Fractie = &amp;quot;ONAFH&amp;quot;))

one_date &amp;lt;- one_date %&amp;gt;% 
  filter(first_word != &amp;quot;Zetelt&amp;quot;) %&amp;gt;% 
  rbind(zetelt)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now just need to bind them and go to the next batch.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reps54 &amp;lt;- reps54 %&amp;gt;% 
  filter(is.na(date_1) | date_1 == &amp;quot;2001-01-01&amp;quot;
         | (date_1 != &amp;quot;2001-01-01&amp;quot; &amp;amp; date_2 != &amp;quot;2001-01-01&amp;quot;))%&amp;gt;% 
  rbind(one_date)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;two_dates&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;two_dates &amp;lt;- reps54 %&amp;gt;% 
  filter(!is.na(date_1) &amp;amp;
           !is.na(date_2) &amp;amp;
           is.na(date_3))

unique(two_dates$first_word)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Vervangt&amp;quot;   &amp;quot;Werd&amp;quot;       &amp;quot;Voorzitter&amp;quot; &amp;quot;Zetelt&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are now three replacements (Vervangt) with two dates in the comment phrase. It is getting complicated, but fortunately they seem to be structured the same way.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;two_dates %&amp;gt;% filter(first_word == &amp;quot;Vervangt&amp;quot;) %&amp;gt;%
  mutate(Opmerkingen = substr(Opmerkingen, 0, 100)) %&amp;gt;% 
  select(Opmerkingen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                                                            Opmerkingen
## 1 Vervangt vanaf 22 9 2015 Sophie Wilm√®s, die minister wordt in de federale regering-Michel I. Wilm√®s 
## 2 Vervangt vanaf 4 10 2018 St√©phane Crusni√®re, die financieel en administratief directeur van de R√©gie
## 3 Vervangt vanaf 10 11 2016 Sarah Claerhout, die uit CD&amp;amp;V stapt en haar zetel aan haar partij teruggee&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we are looking at these parliamentarians:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;two_dates %&amp;gt;% filter(first_word == &amp;quot;Vervangt&amp;quot;) %&amp;gt;% 
  select(fn_ln)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                  fn_ln
## 1      Gautier Calomne
## 2     Michel Corthouts
## 3 Vincent Van Peteghem&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They just enter the parliament at date_1, that is easy, but there is more information in the remarks. Easy part first (EPF), low hanging fruits, quick impacts and what have you.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;vervangt &amp;lt;- two_dates %&amp;gt;% 
  filter(first_word == &amp;quot;Vervangt&amp;quot;) %&amp;gt;% 
  mutate(start_date = date_1)

two_dates &amp;lt;- two_dates %&amp;gt;% 
  filter(first_word != &amp;quot;Vervangt&amp;quot;) %&amp;gt;%
  rbind(vervangt)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those with ‚Äúwerd‚Äù were replaced during a period, so end_date is date_1-1 for their first period, and date_2+1 is the start date of their second period.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;werd_1 &amp;lt;- two_dates %&amp;gt;% 
  filter(first_word == &amp;quot;Werd&amp;quot;) %&amp;gt;% 
  mutate(end_date = ymd(date_1) - days(1))

werd_2 &amp;lt;- two_dates %&amp;gt;% 
  filter(first_word == &amp;quot;Werd&amp;quot;) %&amp;gt;% 
  mutate(start_date = ymd(date_2) + days(1))

werd &amp;lt;- rbind(werd_1, werd_2)

two_dates &amp;lt;- two_dates %&amp;gt;%
  filter(first_word != &amp;quot;Werd&amp;quot;) %&amp;gt;%
  rbind(werd)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those with ‚ÄúZetelt‚Äù (seats) changed parties twice. First became independent (from NV&amp;amp;A), then created a new party ‚ÄúVuye&amp;amp;Wouters‚Äù.
Mr Hendrik Vuye tweets a lot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;zetelt&amp;lt;- two_dates %&amp;gt;% 
  filter(first_word == &amp;quot;Zetelt&amp;quot;) 

zetelt$Opmerkingen&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Zetelt van 22 9 tot 27 10 2016 als onafhankelijke en vanaf 27 10 2016 in de Vuye&amp;amp;Wouters-fractie.&amp;quot;  
## [2] &amp;quot;Zetelt vanaf 22 9 tot 27 10 2016 als onafhankelijke en vanaf 27 10 2016 in de Vuye&amp;amp;Wouters-fractie.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nva &amp;lt;- zetelt %&amp;gt;% 
  mutate(Fractie = &amp;quot;NV&amp;amp;A&amp;quot;,
         end_date = ymd(date_1) - days(1))
onaf &amp;lt;- zetelt %&amp;gt;% 
  mutate(Fractie = &amp;quot;ONAFH&amp;quot;,
         start_date = date_1,
         end_date = date_2)
vuye &amp;lt;- zetelt %&amp;gt;% 
  mutate(Fractie = &amp;quot;Vuye&amp;amp;Wouters&amp;quot;,
         start_date = ymd(date_2) + days(1))

two_dates&amp;lt;- two_dates %&amp;gt;% 
  filter(first_word != &amp;quot;Zetelt&amp;quot;) %&amp;gt;% 
  rbind(nva) %&amp;gt;% 
  rbind(onaf) %&amp;gt;% 
  rbind(vuye)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to go back to the comments with one days. They indicate the end date of a number of people and in particular of mayors or members of the government.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;one_date %&amp;gt;% 
  filter(first_word == &amp;quot;Vervangt&amp;quot;) %&amp;gt;% 
  select(Opmerkingen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                                                                 Opmerkingen
## 1                     Vervangt vanaf 13 12 2017 Ann Vanheste, die voltijds burgemeester van De Panne wordt.
## 2                         Vervangt vanaf 9 11 2017 Willy Demeyer, die voltijds burgemeester van Luik wordt.
## 3         Vervangt vanaf 30 7 2014 C√©line Fremault, die minister in de Brusselse regering-Vervoort II wordt
## 4  Vervangt vanaf 6 12 2018 Sabien Lahaye-Battheu, die gedeputeerde van de provincie West-Vlaanderen wordt.
## 5                        Vervangt vanaf 23 4 2015 Melchior Wathelet, die actief wordt in het bedrijfsleven.
## 6           Vervangt vanaf 14 10 2014 Alexander De Croo, die minister in de federale regering-Michel I werd
## 7                Vervangt vanaf 24 8 2017 Denis Ducarme, die minister in de federale Regering-Michel I werd
## 8                                      Vervangt vanaf 20 9 2018 Isabelle Poncelet, die de politiek verlaat.
## 9          Vervangt vanaf 14 10 2014 Daniel Bacquelaine, die minister in de federale regering-Michel I werd
## 10                  Vervangt vanaf 24 5 2018 Eric Massin, die voltijds OCMW-voorzitter van Charleroi wordt.
## 11            Vervangt vanaf 14 10 2014 Maggie De Block, die minister in de federale regering-Michel I werd
## 12              Vervangt vanaf 12 1 2017 Johan Vande Lanotte, die voltijds burgemeester van Oostende wordt.
## 13    Vervangt vanaf 14 10 2014 Marie-Christine Marghem, die minister in de federale regering-Michel I werd
## 14                                 Vervangt vanaf 19 6 2014 Marijke Dillen, die beslist om niet te zetelen.
## 15    Vervangt vanaf 18 10 2018 Muriel Gerkens, die zich kandidaat stelt bij de provincieraadsverkiezingen.
## 16             Vervangt vanaf 14 10 2014 Charles Michel, die minister in de federale regering-Michel I werd
## 17                           Vervangt vanaf 28 5 2015 Zakia Khattabi, die partijvoorzitter van Ecolo wordt.
## 18                 Vervangt vanaf 14 10 2014 Koen Geens, die minister in de federale regering-Michel I werd
## 19                                 Vervangt vanaf 6 12 2018 Benoit Hellings, die schepen van Brussel wordt.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could use a regex to extract between the last digit and the ,
But regexps are always more difficult than they seem. So here it is just easier to use ‚Äòsubstr‚Äô.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_locate(one_date$Opmerkingen[10], &amp;quot;201&amp;quot;)[2]+3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 26&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_locate(one_date$Opmerkingen[10], &amp;quot;,&amp;quot;)[1]-1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 42&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;substr(one_date$Opmerkingen[10], 26, 42)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Melchior Wathelet&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;end_dates &amp;lt;- one_date %&amp;gt;% 
  select(date_1, Opmerkingen, first_word) %&amp;gt;% 
  filter(first_word == &amp;quot;Vervangt&amp;quot;) %&amp;gt;%
  mutate(fn_ln = substr(Opmerkingen,
                                str_locate(Opmerkingen, &amp;quot;201&amp;quot;)[,2]+3,
                                str_locate(Opmerkingen, &amp;quot;,&amp;quot;)[,1]-1)) %&amp;gt;% 
  select(-Opmerkingen, -first_word, )

end_dates$fn_ln&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Ann Vanheste&amp;quot;            &amp;quot;Willy Demeyer&amp;quot;          
##  [3] &amp;quot;C√©line Fremault&amp;quot;         &amp;quot;Sabien Lahaye-Battheu&amp;quot;  
##  [5] &amp;quot;Melchior Wathelet&amp;quot;       &amp;quot;Alexander De Croo&amp;quot;      
##  [7] &amp;quot;Denis Ducarme&amp;quot;           &amp;quot;Isabelle Poncelet&amp;quot;      
##  [9] &amp;quot;Daniel Bacquelaine&amp;quot;      &amp;quot;Eric Massin&amp;quot;            
## [11] &amp;quot;Maggie De Block&amp;quot;         &amp;quot;Johan Vande Lanotte&amp;quot;    
## [13] &amp;quot;Marie-Christine Marghem&amp;quot; &amp;quot;Marijke Dillen&amp;quot;         
## [15] &amp;quot;Muriel Gerkens&amp;quot;          &amp;quot;Charles Michel&amp;quot;         
## [17] &amp;quot;Zakia Khattabi&amp;quot;          &amp;quot;Koen Geens&amp;quot;             
## [19] &amp;quot;Benoit Hellings&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_end &amp;lt;- reps54 %&amp;gt;%
  filter(fn_ln %in% end_dates$fn_ln)

setdiff(end_dates$fn_ln,new_end$fn_ln)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Marijke Dillen&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we do not have &lt;a href=&#34;https://nl.wikipedia.org/wiki/Marijke_Dillen&#34;&gt;that&lt;/a&gt; nice young lady because she decided not to go to parliament and gave her seat to the fine young gentleman Jan Penris&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;to_replace &amp;lt;- new_end %&amp;gt;% 
  left_join(end_dates,  by = c(&amp;quot;fn_ln&amp;quot;)) %&amp;gt;% 
  mutate(end_date = date_1.y) %&amp;gt;% 
  select(-date_1.y) %&amp;gt;% 
  rename(&amp;quot;date_1&amp;quot; = &amp;quot;date_1.x&amp;quot;)

reps54&amp;lt;-  reps54 %&amp;gt;%
  filter(!fn_ln %in% end_dates$fn_ln) %&amp;gt;% 
  rbind(to_replace)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do the same with the comments within ‚Äòtwo_dates‚Äô&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;two_dates %&amp;gt;% 
  filter(first_word == &amp;quot;Vervangt&amp;quot;) %&amp;gt;%
  mutate(Opmerkingen = substr(Opmerkingen, 0, 100)) %&amp;gt;% 
  select(Opmerkingen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                                                            Opmerkingen
## 1 Vervangt vanaf 22 9 2015 Sophie Wilm√®s, die minister wordt in de federale regering-Michel I. Wilm√®s 
## 2 Vervangt vanaf 4 10 2018 St√©phane Crusni√®re, die financieel en administratief directeur van de R√©gie
## 3 Vervangt vanaf 10 11 2016 Sarah Claerhout, die uit CD&amp;amp;V stapt en haar zetel aan haar partij teruggee&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here we have for instance Mrs Wilm√®s who is being replaced on 22/09/2015, but who replaced Mr Reynders on 11/10/2014.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;end_dates_two &amp;lt;- two_dates %&amp;gt;% 
  select(date_1, Opmerkingen, first_word) %&amp;gt;% 
  filter(first_word == &amp;quot;Vervangt&amp;quot;) %&amp;gt;%
  mutate(fn_ln = substr(Opmerkingen,
                                str_locate(Opmerkingen, &amp;quot;201&amp;quot;)[,2]+3,
                                str_locate(Opmerkingen, &amp;quot;,&amp;quot;)[,1]-1)) %&amp;gt;% 
  select(-Opmerkingen, -first_word, )

end_dates_two$fn_ln&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Sophie Wilm√®s&amp;quot;      &amp;quot;St√©phane Crusni√®re&amp;quot; &amp;quot;Sarah Claerhout&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;to_replace_two &amp;lt;- reps54 %&amp;gt;%
  filter(fn_ln %in% end_dates_two$fn_ln) %&amp;gt;%
  left_join(end_dates_two,  by = c(&amp;quot;fn_ln&amp;quot;)) %&amp;gt;% 
  mutate(end_date = date_1.y) %&amp;gt;% 
  select(-date_1.y) %&amp;gt;% 
  rename(&amp;quot;date_1&amp;quot; = &amp;quot;date_1.x&amp;quot;)

reps54 &amp;lt;-  reps54 %&amp;gt;%
  filter(!fn_ln %in% end_dates_two$fn_ln) %&amp;gt;%
  rbind(to_replace_two)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then the last three replacements for the end dates of Mr De Crem, Reynders and Flahaut.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;end_dates_three &amp;lt;- two_dates %&amp;gt;% 
  select(date_2, Opmerkingen, first_word) %&amp;gt;% 
  filter(first_word == &amp;quot;Vervangt&amp;quot;) %&amp;gt;%
  mutate(Opmerkingen = substr(Opmerkingen,str_locate(Opmerkingen, &amp;quot;,&amp;quot;)[,1]+3, 100000))%&amp;gt;% 
  mutate(fn_ln = substr(Opmerkingen,
                                str_locate(Opmerkingen, &amp;quot;201&amp;quot;)[,2]+3,
                                str_locate(Opmerkingen, &amp;quot;,&amp;quot;)[,1]-1)) %&amp;gt;% 
  select(-Opmerkingen, -first_word, )

end_dates_three$fn_ln&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Didier Reynders&amp;quot; &amp;quot;Andr√© Flahaut&amp;quot;   &amp;quot;Pieter De Crem&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;to_replace_three &amp;lt;- reps54 %&amp;gt;%
  filter(fn_ln %in% end_dates_three$fn_ln) %&amp;gt;%
  left_join(end_dates_three,  by = c(&amp;quot;fn_ln&amp;quot;)) %&amp;gt;% 
  mutate(end_date = date_2.y) %&amp;gt;% 
  select(-date_2.y) %&amp;gt;% 
  rename(&amp;quot;date_2&amp;quot; = &amp;quot;date_2.x&amp;quot;)

reps54 &amp;lt;-  reps54 %&amp;gt;%
  filter(!fn_ln %in% end_dates_three$fn_ln) %&amp;gt;%
  rbind(to_replace_three)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Starting to see the end of the tunnel. Still need to arrange the case of Mrs Turtelboom and Mr Frank Wilrycx.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reps54 %&amp;gt;% 
  filter(fn_ln == &amp;quot;Frank Wilrycx&amp;quot;) %&amp;gt;% 
  select(Opmerkingen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                                                                                                                                                               Opmerkingen
## 1 Vervangt sinds 3 5 2018 Annemie Turtelboom, die lid wordt van de Europese Rekenkamer. Eerder verving hij van 30 7 2014 tot 29 4 2016 Turtelboom toen die minister was in de Vlaamse Regering-Bourgeois.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dates &amp;lt;- reps54 %&amp;gt;% 
  filter(fn_ln == &amp;quot;Frank Wilrycx&amp;quot;) %&amp;gt;% 
  select(date_1, date_2, date_3)
dates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       date_1     date_2     date_3
## 1 2018-05-03 2014-07-30 2016-04-29&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;three_dates &amp;lt;- reps54 %&amp;gt;% 
  filter(fn_ln == &amp;quot;Frank Wilrycx&amp;quot;) %&amp;gt;% 
  mutate(start_date = dates$date_2) %&amp;gt;% 
  mutate(end_date = dates$date_3) %&amp;gt;% 
  rbind(reps54 %&amp;gt;% filter(fn_ln == &amp;quot;Frank Wilrycx&amp;quot;) %&amp;gt;% 
        mutate(start_date = dates$date_1)) %&amp;gt;% 
  rbind(reps54 %&amp;gt;% filter(fn_ln == &amp;quot;Annemie Turtelboom&amp;quot;) %&amp;gt;% 
          mutate(end_date = ymd(dates$date_2) - days(1))) %&amp;gt;% 
  rbind(reps54 %&amp;gt;% filter(fn_ln == &amp;quot;Annemie Turtelboom&amp;quot;) %&amp;gt;% 
          mutate(start_date = ymd(dates$date_3) + days(1)) %&amp;gt;% 
          mutate(end_date = ymd(dates$date_1) - days(1)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So let‚Äôs bring them all together before tackling missing values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(one_date)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 26 19&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(two_dates)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 18 19&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(three_dates)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  4 19&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(reps54)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 182  19&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(unique(reps54$fn_ln))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 179&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reps54 &amp;lt;- reps54 %&amp;gt;% 
  filter(!fn_ln %in% one_date) %&amp;gt;% 
  filter(!fn_ln %in% two_dates) %&amp;gt;% 
  filter(!fn_ln %in% three_dates) %&amp;gt;% 
  rbind(one_date) %&amp;gt;% 
  rbind(two_dates) %&amp;gt;% 
  rbind(three_dates) %&amp;gt;% 
  mutate(fn_ln = trimws(fn_ln, c(&amp;quot;both&amp;quot;)))

length(unique(reps54$fn_ln))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 179&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(reps54$fn_ln)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 230&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save before cleaning.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# saveRDS(reps54, &amp;quot;./data/20190503/reps54_before_cleaning.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm unfortunately the site dekamer.be is unstable or under transformation. It stopped listing the current members with their
party and lannguage. Untill it shows that page again, we‚Äôll be using the fields obtained from Wikipedia instead.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;empty_spaces &amp;lt;- reps54 %&amp;gt;%
  mutate(language = Taalgroep,
         party =Fractie) %&amp;gt;% 
  filter(is.na(language)) %&amp;gt;% 
  arrange(fn_ln)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;empty_spaces$ln_fn&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;De Croo Alexander&amp;quot;       &amp;quot;Flahaut Andr√©&amp;quot;          
##  [3] &amp;quot;Vanheste Ann&amp;quot;            &amp;quot;Turtelboom Annemie&amp;quot;     
##  [5] &amp;quot;Turtelboom Annemie&amp;quot;      &amp;quot;Turtelboom Annemie&amp;quot;     
##  [7] &amp;quot;Hellings Benoit&amp;quot;         &amp;quot;Fremault C√©line&amp;quot;        
##  [9] &amp;quot;Michel Charles&amp;quot;          &amp;quot;Bacquelaine Daniel&amp;quot;     
## [11] &amp;quot;Ducarme Denis&amp;quot;           &amp;quot;Reynders Didier&amp;quot;        
## [13] &amp;quot;Massin Eric&amp;quot;             &amp;quot;Poncelet Isabelle&amp;quot;      
## [15] &amp;quot;Klaps Johan&amp;quot;             &amp;quot;Vande Lanotte Johan&amp;quot;    
## [17] &amp;quot;Geens Koen&amp;quot;              &amp;quot;De Block Maggie&amp;quot;        
## [19] &amp;quot;Marghem Marie-Christine&amp;quot; &amp;quot;Wathelet Melchior&amp;quot;      
## [21] &amp;quot;Gerkens Muriel&amp;quot;          &amp;quot;De Crem Pieter&amp;quot;         
## [23] &amp;quot;Hufkens Renate&amp;quot;          &amp;quot;Lahaye-Battheu Sabien&amp;quot;  
## [25] &amp;quot;Claerhout Sarah&amp;quot;         &amp;quot;Wilm√®s Sophie&amp;quot;          
## [27] &amp;quot;Crusni√®re St√©phane&amp;quot;      &amp;quot;Demeyer Willy&amp;quot;          
## [29] &amp;quot;Van der Donckt Wim&amp;quot;      &amp;quot;Raskin Wouter&amp;quot;          
## [31] &amp;quot;Khattabi Zakia&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For now I leave some fields incomplete and see if we can have fun finding them with algorithms or with some other tools. But since we have a number of their tweets in ram, we kan have a shot at guessing their language ‚Äòrole‚Äô.&lt;/p&gt;
&lt;p&gt;On the other hand if you are familiar with Belgium, you could just make good guesses looking at their first names:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;word(empty_spaces$ln_fn,-1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Alexander&amp;quot;       &amp;quot;Andr√©&amp;quot;           &amp;quot;Ann&amp;quot;            
##  [4] &amp;quot;Annemie&amp;quot;         &amp;quot;Annemie&amp;quot;         &amp;quot;Annemie&amp;quot;        
##  [7] &amp;quot;Benoit&amp;quot;          &amp;quot;C√©line&amp;quot;          &amp;quot;Charles&amp;quot;        
## [10] &amp;quot;Daniel&amp;quot;          &amp;quot;Denis&amp;quot;           &amp;quot;Didier&amp;quot;         
## [13] &amp;quot;Eric&amp;quot;            &amp;quot;Isabelle&amp;quot;        &amp;quot;Johan&amp;quot;          
## [16] &amp;quot;Johan&amp;quot;           &amp;quot;Koen&amp;quot;            &amp;quot;Maggie&amp;quot;         
## [19] &amp;quot;Marie-Christine&amp;quot; &amp;quot;Melchior&amp;quot;        &amp;quot;Muriel&amp;quot;         
## [22] &amp;quot;Pieter&amp;quot;          &amp;quot;Renate&amp;quot;          &amp;quot;Sabien&amp;quot;         
## [25] &amp;quot;Sarah&amp;quot;           &amp;quot;Sophie&amp;quot;          &amp;quot;St√©phane&amp;quot;       
## [28] &amp;quot;Willy&amp;quot;           &amp;quot;Wim&amp;quot;             &amp;quot;Wouter&amp;quot;         
## [31] &amp;quot;Zakia&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But looking at the tweets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tweets &amp;lt;- readRDS(&amp;quot;~/R/blogs/content/post/data/20190503/tweets.rds&amp;quot;)
lang &amp;lt;- tweets %&amp;gt;% 
  filter(ln_fn %in% empty_spaces$ln_fn) %&amp;gt;% 
  select(ln_fn, lang) %&amp;gt;% 
  group_by(ln_fn, lang) %&amp;gt;% 
  summarise(count = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# this code is sinfull, apologies to the tidyverse saints;
languages_used &amp;lt;- lang %&amp;gt;%
  group_by(ln_fn)%&amp;gt;%
  summarise(m = max(count))%&amp;gt;% 
  left_join(lang) %&amp;gt;% 
  filter(m == count) %&amp;gt;% 
  select(-m, -count) %&amp;gt;% 
  mutate(language = ifelse(lang == &amp;quot;nl&amp;quot;, &amp;quot;Nederlands&amp;quot;, &amp;quot;Frans&amp;quot;)) %&amp;gt;% 
  select(-lang)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;ln_fn&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setdiff(empty_spaces$ln_fn, languages_used$ln_fn)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Vande Lanotte Johan&amp;quot; &amp;quot;Gerkens Muriel&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So let‚Äôs add them and end this for now.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;to_add &amp;lt;- data.frame(&amp;quot;ln_fn&amp;quot; = c(&amp;quot;Vande Lanotte Johan&amp;quot;,&amp;quot;Gerkens Muriel&amp;quot;), 
                     &amp;quot;language&amp;quot; = c(&amp;quot;Nederlands&amp;quot;, &amp;quot;Frans&amp;quot;)) 
languages_used &amp;lt;-languages_used %&amp;gt;% 
  rbind(to_add)

added_languages &amp;lt;- empty_spaces %&amp;gt;% 
  left_join(languages_used, by = c(&amp;quot;ln_fn&amp;quot;)) %&amp;gt;% 
  mutate(language = language.y) %&amp;gt;% 
  select(-language.x, -language.y)

reps54 &amp;lt;- reps54 %&amp;gt;% 
  filter(!is.na(language)) %&amp;gt;% 
  rbind(added_languages) %&amp;gt;% 
  arrange(fn_ln)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save after first cleaning.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# saveRDS(reps54, &amp;quot;./data/20190503/reps54_after_cleaning.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I‚Äôll pick up the tweets analysis soon, but first want to show you some cool stuff using Rekognition from aws.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Belgian parliamentarians Twitter accounts</title>
      <link>/post/belgian-parliamentarians-twitter-accounts/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      <author>William Bourgeois</author>
      <guid>/post/belgian-parliamentarians-twitter-accounts/</guid>
      <description></description>
      
      <content>


&lt;p&gt;Now that we can scrape the names of the parliamentarians of the 54th legislature, we can try to find their Twitter accounts too.&lt;/p&gt;
&lt;p&gt;Let‚Äôs start by reconstructing the list. Then we can search Twitter for their accounts handles. A bit of grunt work and no visuals in this post, but it is needed to harvest parlaimentarians‚Äô tweets soonish.&lt;/p&gt;
&lt;p&gt;Starting with attaching libraries, and in particular &lt;a href=&#34;https://rtweet.info/&#34;&gt;‚Äòrtweet‚Äô&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#libraries
library(&amp;quot;tidyverse&amp;quot;)
library(&amp;quot;rvest&amp;quot;)
library(&amp;quot;glue&amp;quot;)
library(&amp;quot;rtweet&amp;quot;)
library(&amp;quot;purrr&amp;quot;)

# the ones seating currently, with their (current) party

url &amp;lt;- paste0(&amp;quot;http://www.dekamer.be/kvvcr/showpage.cfm?section=&amp;quot;,
              &amp;quot;/depute&amp;amp;language=nl&amp;amp;cfm=/site/wwwcfm/depute/cvlist54.cfm&amp;quot;)

table &amp;lt;- url %&amp;gt;% 
  read_html() %&amp;gt;% 
  html_nodes(&amp;quot;#story &amp;gt; table&amp;quot;) %&amp;gt;% 
  html_table()

table &amp;lt;- table[[1]]

names(table) &amp;lt;- c(&amp;quot;ln_fn&amp;quot;, &amp;quot;party&amp;quot;, &amp;quot;d1&amp;quot;, &amp;quot;d2&amp;quot;) # ln_fn is last name, first name
table &amp;lt;- table %&amp;gt;% 
  select(ln_fn, party)

table &amp;lt;- table %&amp;gt;%
  mutate(ln_fn = str_replace_all(ln_fn,&amp;quot;  +&amp;quot;,&amp;quot; &amp;quot;))

# the ones that have left (without party)

url &amp;lt;- paste0(&amp;quot;https://www.dekamer.be/kvvcr/showpage.cfm?section&amp;quot;,
              &amp;quot;=/depute&amp;amp;language=nl&amp;amp;cfm=cvlist54.cfm?legis=54&amp;amp;today=n&amp;quot;)

table_54 &amp;lt;- url %&amp;gt;% 
  read_html() %&amp;gt;% 
  html_nodes(&amp;quot;#story &amp;gt; table&amp;quot;) %&amp;gt;% 
  html_table()

table_54 &amp;lt;- table_54[[1]] # extracting the dataframe

names(table_54) &amp;lt;- c(&amp;quot;ln_fn&amp;quot;, &amp;quot;d1&amp;quot;, &amp;quot;d2&amp;quot;, &amp;quot;d3&amp;quot;)  
table_54 &amp;lt;- table_54 %&amp;gt;% 
  select(ln_fn) %&amp;gt;% 
  arrange(ln_fn)

table_54 &amp;lt;- table_54 %&amp;gt;%
  mutate(ln_fn = str_replace_all(ln_fn,&amp;quot;  +&amp;quot;,&amp;quot; &amp;quot;))

old_members &amp;lt;- table_54 %&amp;gt;% 
  anti_join(table) %&amp;gt;% 
  mutate(party = &amp;quot;tbd&amp;quot;)

table &amp;lt;- rbind(table, old_members)

saveRDS(table, &amp;quot;./data/20190502/table.rds&amp;quot;)

rm(old_members)
rm(table_54)
rm(url)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How many do we have?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nrow(table)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 179&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, did not lose any along the way. Now we have a data frame with the last name and first name of the 179 persons who seated in the 54th legislature (by now there will be few or no changes, since we are so close to this month‚Äôs elections).&lt;/p&gt;
&lt;p&gt;Next the twitter API credentials are needed to use the rtweet package. Documentation can be found &lt;a href=&#34;https://rtweet.info/#api-authorization&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once authenticated, based on our parliamentarian‚Äôs name and using the ‚Äòsearch_users‚Äô function we can find their twitter accounts. I had some success using a for loop in the past, but will try to use the purrr package this time around.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# so tweak the function, because it tries to find by default 100 users
# and because we want to keep track of who we searched for in the results
# take only first result for now

search &amp;lt;- function(x){print (x)
  search_users(x, n=1) %&amp;gt;% # only return one line per name
    mutate(ln_fn = x)} # keep track of who we searched for&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the function ‚Äòpossibly‚Äô a data frame can be created without stopping or including errors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;twitter_users &amp;lt;- map_df(table$ln_fn,possibly(.f= search, otherwise = NULL))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The nice thing about it is that a lot of information can be collected using the Twitter API. Have look yourself:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(twitter_users)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;user_id&amp;quot;                 &amp;quot;status_id&amp;quot;              
##  [3] &amp;quot;created_at&amp;quot;              &amp;quot;screen_name&amp;quot;            
##  [5] &amp;quot;text&amp;quot;                    &amp;quot;source&amp;quot;                 
##  [7] &amp;quot;display_text_width&amp;quot;      &amp;quot;reply_to_status_id&amp;quot;     
##  [9] &amp;quot;reply_to_user_id&amp;quot;        &amp;quot;reply_to_screen_name&amp;quot;   
## [11] &amp;quot;is_quote&amp;quot;                &amp;quot;is_retweet&amp;quot;             
## [13] &amp;quot;favorite_count&amp;quot;          &amp;quot;retweet_count&amp;quot;          
## [15] &amp;quot;hashtags&amp;quot;                &amp;quot;symbols&amp;quot;                
## [17] &amp;quot;urls_url&amp;quot;                &amp;quot;urls_t.co&amp;quot;              
## [19] &amp;quot;urls_expanded_url&amp;quot;       &amp;quot;media_url&amp;quot;              
## [21] &amp;quot;media_t.co&amp;quot;              &amp;quot;media_expanded_url&amp;quot;     
## [23] &amp;quot;media_type&amp;quot;              &amp;quot;ext_media_url&amp;quot;          
## [25] &amp;quot;ext_media_t.co&amp;quot;          &amp;quot;ext_media_expanded_url&amp;quot; 
## [27] &amp;quot;ext_media_type&amp;quot;          &amp;quot;mentions_user_id&amp;quot;       
## [29] &amp;quot;mentions_screen_name&amp;quot;    &amp;quot;lang&amp;quot;                   
## [31] &amp;quot;quoted_status_id&amp;quot;        &amp;quot;quoted_text&amp;quot;            
## [33] &amp;quot;quoted_created_at&amp;quot;       &amp;quot;quoted_source&amp;quot;          
## [35] &amp;quot;quoted_favorite_count&amp;quot;   &amp;quot;quoted_retweet_count&amp;quot;   
## [37] &amp;quot;quoted_user_id&amp;quot;          &amp;quot;quoted_screen_name&amp;quot;     
## [39] &amp;quot;quoted_name&amp;quot;             &amp;quot;quoted_followers_count&amp;quot; 
## [41] &amp;quot;quoted_friends_count&amp;quot;    &amp;quot;quoted_statuses_count&amp;quot;  
## [43] &amp;quot;quoted_location&amp;quot;         &amp;quot;quoted_description&amp;quot;     
## [45] &amp;quot;quoted_verified&amp;quot;         &amp;quot;retweet_status_id&amp;quot;      
## [47] &amp;quot;retweet_text&amp;quot;            &amp;quot;retweet_created_at&amp;quot;     
## [49] &amp;quot;retweet_source&amp;quot;          &amp;quot;retweet_favorite_count&amp;quot; 
## [51] &amp;quot;retweet_retweet_count&amp;quot;   &amp;quot;retweet_user_id&amp;quot;        
## [53] &amp;quot;retweet_screen_name&amp;quot;     &amp;quot;retweet_name&amp;quot;           
## [55] &amp;quot;retweet_followers_count&amp;quot; &amp;quot;retweet_friends_count&amp;quot;  
## [57] &amp;quot;retweet_statuses_count&amp;quot;  &amp;quot;retweet_location&amp;quot;       
## [59] &amp;quot;retweet_description&amp;quot;     &amp;quot;retweet_verified&amp;quot;       
## [61] &amp;quot;place_url&amp;quot;               &amp;quot;place_name&amp;quot;             
## [63] &amp;quot;place_full_name&amp;quot;         &amp;quot;place_type&amp;quot;             
## [65] &amp;quot;country&amp;quot;                 &amp;quot;country_code&amp;quot;           
## [67] &amp;quot;geo_coords&amp;quot;              &amp;quot;coords_coords&amp;quot;          
## [69] &amp;quot;bbox_coords&amp;quot;             &amp;quot;status_url&amp;quot;             
## [71] &amp;quot;name&amp;quot;                    &amp;quot;location&amp;quot;               
## [73] &amp;quot;description&amp;quot;             &amp;quot;url&amp;quot;                    
## [75] &amp;quot;protected&amp;quot;               &amp;quot;followers_count&amp;quot;        
## [77] &amp;quot;friends_count&amp;quot;           &amp;quot;listed_count&amp;quot;           
## [79] &amp;quot;statuses_count&amp;quot;          &amp;quot;favourites_count&amp;quot;       
## [81] &amp;quot;account_created_at&amp;quot;      &amp;quot;verified&amp;quot;               
## [83] &amp;quot;profile_url&amp;quot;             &amp;quot;profile_expanded_url&amp;quot;   
## [85] &amp;quot;account_lang&amp;quot;            &amp;quot;profile_banner_url&amp;quot;     
## [87] &amp;quot;profile_background_url&amp;quot;  &amp;quot;profile_image_url&amp;quot;      
## [89] &amp;quot;ln_fn&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of the fields, like ‚Äúhashstags‚Äù contain lists.&lt;/p&gt;
&lt;p&gt;Arranging columns:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;twitter_users &amp;lt;- twitter_users %&amp;gt;% 
  select(ln_fn, everything())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These names return an error using the ‚Äútwitter_user‚Äù function. But these politicians do not tweet. We can skip them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list_no_twitter &amp;lt;- c(&amp;quot;Deti√®ge Maya&amp;quot;, &amp;quot;Mathot Alain&amp;quot;, &amp;quot;Pivin Philippe&amp;quot;,
                     &amp;quot;Wilrycx Frank&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a data frame with 152 users for our 175 politicians.&lt;/p&gt;
&lt;p&gt;We need to find the right user ids or twitter handles, by looking at key fields in the data frame returned by the ‚Äòsearch_user‚Äô function. (summarised in a smaller data frame)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;inspect &amp;lt;- twitter_users %&amp;gt;%
  select(ln_fn, name, screen_name, description, text)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Luckily most often the first result is the correct one. Although there are also sometimes surprises. At least these do not seem like descriptions of Belgian parliamentarians.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;descriptions &amp;lt;- inspect %&amp;gt;% 
  filter(ln_fn == &amp;quot;Bracke Siegfried&amp;quot; 
         | ln_fn == &amp;quot;Fernandez Fernandez Julie&amp;quot;
         | ln_fn == &amp;quot;Top Alain&amp;quot;
         | ln_fn == &amp;quot;Bonte Hans&amp;quot;) %&amp;gt;% 
  select(description)

descriptions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 1
##   description                                                              
##   &amp;lt;chr&amp;gt;                                                                    
## 1 Levensgenieter                                                           
## 2 Als er niet kan worden gelachen, is het niet ernstig. Links of rechts is~
## 3 Trusted HR advisor for all things BPO, technology, global payroll and sh~
## 4 Legacy Miami Top 40 Under 40 | HACCOF Top 20 Under 40 | Caribbean-born C~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These seem obviously wrong.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;find_again &amp;lt;- tibble(&amp;quot;ln_fn&amp;quot; = c(&amp;quot;Bonte Hans&amp;quot;,&amp;quot;Ceysens Patricia&amp;quot;,&amp;quot;Chabot Jacques&amp;quot;,
                                 &amp;quot;Fernandez Fernandez Julie&amp;quot;,&amp;quot;Geerts David&amp;quot;,
                                 &amp;quot;Henry Olivier&amp;quot;,&amp;quot;Janssen Werner&amp;quot;, &amp;quot;Janssens Dirk&amp;quot;,
                                 &amp;quot;Matz Vanessa&amp;quot;, &amp;quot;Metsu Koen&amp;quot;, &amp;quot;Miller Richard&amp;quot;,
                                 &amp;quot;Pehlivan Fatma&amp;quot;,&amp;quot;Smeyers Sarah&amp;quot;,&amp;quot;Top Alain&amp;quot;,
                                 &amp;quot;Van de Velde Robert&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Would they be first 10 of the search result?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;search &amp;lt;- function(x){print (x)
  search_users(x, n=10) %&amp;gt;% 
    mutate(ln_fn = x)} # keep track of who we searched for

twitter_users_2 &amp;lt;- map_df(find_again$ln_fn,
                          possibly(.f= search, otherwise = NULL))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Bonte Hans&amp;quot;
## [1] &amp;quot;Ceysens Patricia&amp;quot;
## [1] &amp;quot;Chabot Jacques&amp;quot;
## [1] &amp;quot;Fernandez Fernandez Julie&amp;quot;
## [1] &amp;quot;Geerts David&amp;quot;
## [1] &amp;quot;Henry Olivier&amp;quot;
## [1] &amp;quot;Janssen Werner&amp;quot;
## [1] &amp;quot;Janssens Dirk&amp;quot;
## [1] &amp;quot;Matz Vanessa&amp;quot;
## [1] &amp;quot;Metsu Koen&amp;quot;
## [1] &amp;quot;Miller Richard&amp;quot;
## [1] &amp;quot;Pehlivan Fatma&amp;quot;
## [1] &amp;quot;Smeyers Sarah&amp;quot;
## [1] &amp;quot;Top Alain&amp;quot;
## [1] &amp;quot;Van de Velde Robert&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;inspect &amp;lt;- twitter_users_2 %&amp;gt;%
  select(ln_fn, name, screen_name, description, text)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The new batch can easily be identified and added to the first batch.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;twitter_users &amp;lt;- twitter_users %&amp;gt;% 
  filter(!ln_fn %in% find_again$ln_fn) %&amp;gt;% 
  rbind(twitter_users_2 %&amp;gt;% 
  slice(13, 21, 30, 45, 51, 71, 76 , 99, 113))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are still missing these:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setdiff(setdiff(table$ln_fn, twitter_users$ln_fn), list_no_twitter)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Bonte Hans&amp;quot;                &amp;quot;Brotcorne Christian&amp;quot;      
##  [3] &amp;quot;Cassart-Mailleux Caroline&amp;quot; &amp;quot;Ceysens Patricia&amp;quot;         
##  [5] &amp;quot;Cheron Marcel&amp;quot;             &amp;quot;de Coster-Bauchau Sybille&amp;quot;
##  [7] &amp;quot;Delannois Paul-Olivier&amp;quot;    &amp;quot;Delp√©r√©e Francis&amp;quot;         
##  [9] &amp;quot;Devin Laurent&amp;quot;             &amp;quot;D&amp;#39;Haese Christoph&amp;quot;        
## [11] &amp;quot;Dierick Leen&amp;quot;              &amp;quot;Fr√©d√©ric Andr√©&amp;quot;           
## [13] &amp;quot;Galant Isabelle&amp;quot;           &amp;quot;Gerkens Muriel&amp;quot;           
## [15] &amp;quot;Goffinet Anne-Catherine&amp;quot;   &amp;quot;Gustin Luc&amp;quot;               
## [17] &amp;quot;Janssens Dirk&amp;quot;             &amp;quot;Marghem Marie-Christine&amp;quot;  
## [19] &amp;quot;Miller Richard&amp;quot;            &amp;quot;Muylle Nathalie&amp;quot;          
## [21] &amp;quot;Pehlivan Fatma&amp;quot;            &amp;quot;Pirlot S√©bastian&amp;quot;         
## [23] &amp;quot;Vande Lanotte Johan&amp;quot;       &amp;quot;Van den Bergh Jef&amp;quot;        
## [25] &amp;quot;Van de Velde Robert&amp;quot;       &amp;quot;Van Quickenborne Vincent&amp;quot; 
## [27] &amp;quot;Van Rompuy Eric&amp;quot;           &amp;quot;Vanvelthoven Peter&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of these surely have a twitter account. More searching is needed to find:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;citation&#34;&gt;@CarolineCassart&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@patriciaceysens&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@podelannois&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@leendierick&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@dirkjanssens19&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@millerrichardmr&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@nathaliemuylle&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@jefvandenbergh&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@VincentVQ&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@VvelthovenPeter&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@pehlivan_fatma&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@FrankWilrycx&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@McMarghem&lt;/span&gt;
&lt;span class=&#34;citation&#34;&gt;@robvandevelde&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;more &amp;lt;- tibble(handle = wrapr::qc(CarolineCassart, patriciaceysens, podelannois,
                                  leendierick,dirkjanssens19, millerrichardmr,
                                  nathaliemuylle, jefvandenbergh, VincentVQ,
                                  VvelthovenPeter, pehlivan_fatma, FrankWilrycx,
                                  McMarghem),
               ln_fn = c(&amp;quot;Cassart-Mailleux Caroline&amp;quot;, &amp;quot;Ceysens Patricia&amp;quot;,
                         &amp;quot;Delannois Paul-Olivier&amp;quot;, &amp;quot;Dierick Leen&amp;quot;, 
                         &amp;quot;Janssens Dirk&amp;quot;, &amp;quot;Miller Richard&amp;quot;, &amp;quot;Muylle Nathalie&amp;quot;, 
                         &amp;quot;Van den Bergh Jef&amp;quot;, &amp;quot;Van Quickenborne Vincent&amp;quot;, 
                         &amp;quot;Vanvelthoven Peter&amp;quot;, &amp;quot;Pehlivan Fatma&amp;quot; , 
                         &amp;quot;Wilrycx Frank&amp;quot;, &amp;quot;Marghem Marie-Christine&amp;quot;))

more_1 &amp;lt;- more %&amp;gt;% 
  filter(handle !=&amp;quot;pehlivan_fatma&amp;quot;,
         handle !=&amp;quot;FrankWilrycx&amp;quot;)

more_2 &amp;lt;- more %&amp;gt;% 
  filter(handle ==&amp;quot;pehlivan_fatma&amp;quot; |
         handle ==&amp;quot;FrankWilrycx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;search &amp;lt;- function(x){print (x)
  search_users(x, n=1)} # keep track of who we searched for

twitter_users_3 &amp;lt;- map_df(more_1$handle,possibly(.f= search, otherwise = NULL)) %&amp;gt;% 
  cbind(more_1$ln_fn) %&amp;gt;%
  rename(&amp;quot;ln_fn&amp;quot; = &amp;quot;more_1$ln_fn&amp;quot;) %&amp;gt;% 
  select(ln_fn, everything())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;CarolineCassart&amp;quot;
## [1] &amp;quot;patriciaceysens&amp;quot;
## [1] &amp;quot;podelannois&amp;quot;
## [1] &amp;quot;leendierick&amp;quot;
## [1] &amp;quot;dirkjanssens19&amp;quot;
## [1] &amp;quot;millerrichardmr&amp;quot;
## [1] &amp;quot;nathaliemuylle&amp;quot;
## [1] &amp;quot;jefvandenbergh&amp;quot;
## [1] &amp;quot;VincentVQ&amp;quot;
## [1] &amp;quot;VvelthovenPeter&amp;quot;
## [1] &amp;quot;McMarghem&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;twitter_users &amp;lt;- rbind(twitter_users, twitter_users_3)

nrow(twitter_users)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 158&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Still problems with the last two. ‚ÄúFrankWilrycx‚Äù probably because he has not tweeted yet. And ‚Äúpehlivan_fatma‚Äù was a bit harder to find&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;more_2 &amp;lt;- more %&amp;gt;% 
  filter(handle ==&amp;quot;pehlivan_fatma&amp;quot;)

search &amp;lt;- function(x){print (x)
  search_users(x, n=11)} # keep track of who we searched for

twitter_users_4 &amp;lt;- map_df(more_2$handle,
                          possibly(.f= search, 
                                   otherwise = NULL)) %&amp;gt;% 
  cbind(more_2$ln_fn) %&amp;gt;%
  rename(&amp;quot;ln_fn&amp;quot; = &amp;quot;more_2$ln_fn&amp;quot;) %&amp;gt;% 
  select(ln_fn, everything()) %&amp;gt;% 
  slice(11)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;pehlivan_fatma&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;twitter_users &amp;lt;- rbind(twitter_users, twitter_users_4)

nrow(twitter_users)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 159&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are 159 Twitter handles, out of 179 parliamentarians.&lt;/p&gt;
&lt;p&gt;(if you want to have fun with the profile pics they are in &lt;a href=&#34;https://twitter.com/%7Bhandle%7D/photo&#34; class=&#34;uri&#34;&gt;https://twitter.com/{handle}/photo&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;We are now ready to extract a considerable amount of their tweets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;saveRDS(twitter_users, &amp;quot;./data/20190502/twitter_users.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
</content>
      
    </item>
    
    <item>
      <title>members of the chamber of representatives of Belgium, 54th legistlature</title>
      <link>/post/members-of-the-chamber-of-representatives-of-belgium-54th-legistlature/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      <author>William Bourgeois</author>
      <guid>/post/members-of-the-chamber-of-representatives-of-belgium-54th-legistlature/</guid>
      <description></description>
      
      <content>


&lt;p&gt;For a country as small as Belgium 6 governments is a lot. It‚Äôs maybe because we Belgians like to be governed and governed well. Why else would we want to pay for 6 governments, their administration and their parliaments?&lt;/p&gt;
&lt;p&gt;We also love politicians, so we want to have many. I also like politicians and decided to do some NLP on their tweets. But since there are a significant number of politicians in Belgium I searched for an objective criteria to define a subset. What better selection then the members of the national chamber of representatives? They were elected to represent us all at the national level and their tweets should somehow in some way be representative also.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.dekamer.be&#34; class=&#34;uri&#34;&gt;https://www.dekamer.be&lt;/a&gt; is the official website of the chamber. Two lists are interesting here. One has the current members, the other one the complete list of members that at one moment or another were part of the parliament during the 54th legislature following the 2014 elections.&lt;/p&gt;
&lt;p&gt;Let‚Äôs scrape them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;tidyverse&amp;quot;)
library(&amp;quot;rvest&amp;quot;)
library(&amp;quot;XML&amp;quot;)
library(&amp;quot;glue&amp;quot;)
library(&amp;quot;magick&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url &amp;lt;- paste0(&amp;quot;http://www.dekamer.be/kvvcr/showpage.cfm?section=/&amp;quot;,
&amp;quot;depute&amp;amp;language=nl&amp;amp;cfm=/site/wwwcfm/depute/cvlist54.cfm&amp;quot;)

table &amp;lt;- url %&amp;gt;% 
  read_html() %&amp;gt;% 
  html_nodes(&amp;quot;#story &amp;gt; table&amp;quot;) %&amp;gt;% 
  html_table()

table &amp;lt;- table[[1]] # extracting the dataframe

names(table) &amp;lt;- c(&amp;quot;ln_fn&amp;quot;, &amp;quot;party&amp;quot;, &amp;quot;d1&amp;quot;, &amp;quot;d2&amp;quot;)
table &amp;lt;- table %&amp;gt;% 
  select(ln_fn, party) %&amp;gt;% 
  arrange(ln_fn)

head(table)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                  ln_fn party
## 1                        Almaci Meyrem    NA
## 2                   Bacquelaine Daniel    NA
## 3                           Becq Sonja    NA
## 4 Beke                          Wouter    NA
## 5                         Bellens Rita    NA
## 6                      Ben Hamou Nawal    NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The white spaces between the last name and first some of some, like Wouter Beke need to be cleaned.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table &amp;lt;- table %&amp;gt;%
  mutate(ln_fn = str_replace_all(ln_fn,&amp;quot;  +&amp;quot;,&amp;quot; &amp;quot;))

nrow(table)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 179&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;150 members today with their current political party. And the parties and number of seats are:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table %&amp;gt;% 
  group_by(party) %&amp;gt;% 
  summarise(members=n()) %&amp;gt;% 
  arrange(desc(members))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   party members
##   &amp;lt;lgl&amp;gt;   &amp;lt;int&amp;gt;
## 1 NA        179&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm the page we used is down. :dissapointed:&lt;/p&gt;
&lt;p&gt;We can also scrape the complete list of members of the 54th legislature.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url &amp;lt;- paste0(&amp;quot;https://www.dekamer.be/kvvcr/showpage.cfm?section&amp;quot;,
              &amp;quot;=/depute&amp;amp;language=nl&amp;amp;cfm=cvlist54.cfm?legis=54&amp;amp;today=n&amp;quot;)

table_54 &amp;lt;- url %&amp;gt;% 
  read_html() %&amp;gt;% 
  html_nodes(&amp;quot;#story &amp;gt; table&amp;quot;) %&amp;gt;% 
  html_table()

table_54 &amp;lt;- table_54[[1]] # extracting the dataframe

names(table_54) &amp;lt;- c(&amp;quot;ln_fn&amp;quot;, &amp;quot;d1&amp;quot;, &amp;quot;d2&amp;quot;, &amp;quot;d3&amp;quot;)  
table_54 &amp;lt;- table_54 %&amp;gt;% 
  select(ln_fn) %&amp;gt;% 
  arrange(ln_fn)

table_54 &amp;lt;- table_54 %&amp;gt;%
  mutate(ln_fn = str_replace_all(ln_fn,&amp;quot;  +&amp;quot;,&amp;quot; &amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This table does not mention the party, which is a pity because some members have changed since 2014.&lt;/p&gt;
&lt;p&gt;Who has left ?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table_54 %&amp;gt;% 
  anti_join(table) %&amp;gt;% 
  unlist() %&amp;gt;% 
  unname()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## character(0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So indeed 29 representatives. But some left to work in the government and then came back when their party decided to leave government because of a city in northern Africa. Go figure.&lt;/p&gt;
&lt;p&gt;But it does make the identification of a tweet as a tweet being sent by a member of parliament a little bit more complicated because we need to match the exact date of the tweet to the periods the politician was seating. I have a feeling this will imply some stupid hard coding. üò©&lt;/p&gt;
&lt;p&gt;Let‚Äôs have some fun first.&lt;/p&gt;
&lt;p&gt;Looking at the page of the current members of parliament, and more specifically at the url leading to the members page, their identifier can be discovered. For instance Mrs Almaci has id 01189 for the website. So once the &lt;a href=&#34;https://www.w3schools.com/xml/xml_xpath.asp&#34;&gt;xpath&lt;/a&gt; is known it is relatively easy to extract the individual member‚Äôs webpage url.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url &amp;lt;- paste0(&amp;quot;http://www.dekamer.be/kvvcr/showpage.cfm?section&amp;quot;,
              &amp;quot;=/depute&amp;amp;language=nl&amp;amp;cfm=cvlist54.cfm?legis=54&amp;amp;today=n&amp;quot;)
page &amp;lt;- url %&amp;gt;% 
  read_html() %&amp;gt;% 
  html_nodes(xpath=  &amp;#39;//*[@id=&amp;quot;story&amp;quot;]/table&amp;#39;) 

# loop to get urls
urls &amp;lt;- tibble()

for(i in 1:nrow(table_54)){
  url &amp;lt;- xml_attrs(xml_child(xml_child(xml_child(page[[1]], i), 1), 1))
  url &amp;lt;- unname(url)
  name &amp;lt;- table_54$ln_fn[i]
  url &amp;lt;- cbind(name, url)
  urls &amp;lt;- rbind(urls, url)
}

# constructing the url
table_ids &amp;lt;- urls %&amp;gt;%
  mutate(url = paste0(&amp;quot;http://www.dekamer.be/kvvcr/&amp;quot;, url))   
  
table_ids %&amp;gt;%
  mutate(id = gsub(&amp;#39;^.*key=*|\\s*&amp;amp;lact.*$&amp;#39;,&amp;#39;&amp;#39;, url)) %&amp;gt;%
  mutate(row = rownames(.)) %&amp;gt;% 
  select(row, name, id) %&amp;gt;% 
  slice(29:39) %&amp;gt;% 
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   row               name    id
## 1  29  D&amp;#39;Haese Christoph 06731
## 2  30   Daerden Fr√©d√©ric 00951
## 3  31 Dallemagne Georges 00895
## 4  32    De Block Maggie 01183
## 5  33    De Coninck Inez 06842
## 6  34  De Coninck Monica 06286&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But there is a problem with matching the names and the ids.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- table_ids
names &amp;lt;- tibble()

for (i in (1:nrow(x))){
  url &amp;lt;- x$url[i]
  fn_ln &amp;lt;- url %&amp;gt;%
    read_html() %&amp;gt;%
    html_nodes(xpath=  &amp;#39;//*[@id=&amp;quot;myform&amp;quot;]/center/h2&amp;#39;) %&amp;gt;% 
    html_text() %&amp;gt;% 
    as.data.frame()
  info &amp;lt;- cbind(fn_ln, url)
  names &amp;lt;- rbind(names, info)
}

names(names) &amp;lt;- c(&amp;quot;fn_ln&amp;quot;,&amp;quot;url&amp;quot;)

names &amp;lt;- names %&amp;gt;% 
  mutate(fn_ln =(str_replace_all(fn_ln,&amp;quot;  +&amp;quot;,&amp;quot; &amp;quot;)))

names %&amp;gt;%
  mutate(id = gsub(&amp;#39;^.*key=*|\\s*&amp;amp;lact.*$&amp;#39;,&amp;#39;&amp;#39;, url)) %&amp;gt;%
  mutate(row = rownames(.)) %&amp;gt;% 
  select(row, fn_ln, id) %&amp;gt;% 
  slice(57:65) %&amp;gt;% 
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   row             fn_ln    id
## 1  57 Christoph D&amp;#39;Haese 06907
## 2  58      Leen Dierick 01201
## 3  59      Elio Di Rupo 00439
## 4  60      Beno√Æt Dispa 06435
## 5  61     Denis Ducarme 01056
## 6  62     Daphn√© Dumery 06086&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The tables are sorted differently so there are wrong ids attributed to some parliamentarians (like Christophe D‚ÄôHaese).&lt;/p&gt;
&lt;p&gt;We need to correct that. Since the fn_ln are correct, we can build a key based on the letters in the name of the person.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_sort &amp;lt;- function(x)
  sapply(lapply(strsplit(x, NULL), sort), paste, collapse=&amp;quot;&amp;quot;)

w_key &amp;lt;- table_ids %&amp;gt;% 
  mutate(key = tolower(str_replace_all(name,&amp;quot; &amp;quot;,&amp;quot;&amp;quot;))) %&amp;gt;% 
  mutate(key = str_sort(key)) %&amp;gt;% 
  select(-url)

names_w_key &amp;lt;- names %&amp;gt;% 
  mutate(key = tolower(str_replace_all(fn_ln,&amp;quot; &amp;quot;,&amp;quot;&amp;quot;))) %&amp;gt;% 
  mutate(key = str_sort(key))

names &amp;lt;- names_w_key %&amp;gt;% 
  left_join(w_key) %&amp;gt;% 
  rename(&amp;quot;ln_fn&amp;quot; = &amp;quot;name&amp;quot;)

names %&amp;gt;% 
  select(-url) %&amp;gt;% 
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                fn_ln               key              ln_fn
## 1      Meyrem Almaci      aaceeilmmmry      Almaci Meyrem
## 2 Daniel Bacquelaine aaabcdeeeiillnnqu Bacquelaine Daniel
## 3         Sonja Becq         abcejnoqs         Becq Sonja
## 4       Wouter Beke         beeekortuw        Beke Wouter
## 5       Rita Bellens       abeeillnrst       Bellens Rita
## 6    Nawal Ben Hamou     aaabehlmnnouw    Ben Hamou Nawal&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems to work. Names are clean. Now the id code is needed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# correct id
# extract their id from the url
names &amp;lt;- names %&amp;gt;%
  mutate(id = gsub(&amp;#39;^.*key=*|\\s*&amp;amp;lact.*$&amp;#39;,&amp;#39;&amp;#39;, url))   &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And let‚Äôs join the party where we can&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names &amp;lt;- names %&amp;gt;% 
  mutate(ln_fn = as.character(ln_fn)) %&amp;gt;% # transform from factor
  left_join(table)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;ln_fn&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have in ‚Äòurls‚Äô the name and links to the personal webpage of the representatives on the chamber‚Äôs website. Notice their id at the end of the url after ‚Äòcfm?key=‚Äô and before ‚Äò&amp;amp;lat‚Äô.&lt;/p&gt;
&lt;p&gt;On their personal space there is more information like their parliament email, their personal website and a short cv.&lt;/p&gt;
&lt;p&gt;Let‚Äôs only scrape their language for now.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_language &amp;lt;- function (url){
  as.character(url) %&amp;gt;% 
  read_html() %&amp;gt;% 
  html_node(&amp;quot;td &amp;gt; p &amp;quot;) %&amp;gt;% 
  html_text() %&amp;gt;% 
  str_extract(&amp;#39;(?&amp;lt;=Taal:\\s)\\w+&amp;#39;) 
 }

names &amp;lt;- map_chr(names$url, get_language) %&amp;gt;% 
  cbind(names) 

names &amp;lt;- rename(names, language = .)

saveRDS(names, &amp;quot;./data/190417/names.rds&amp;quot;)

head(names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   language              fn_ln
## 1     &amp;lt;NA&amp;gt;      Meyrem Almaci
## 2     &amp;lt;NA&amp;gt; Daniel Bacquelaine
## 3     &amp;lt;NA&amp;gt;         Sonja Becq
## 4     &amp;lt;NA&amp;gt;       Wouter Beke 
## 5     &amp;lt;NA&amp;gt;       Rita Bellens
## 6     &amp;lt;NA&amp;gt;    Nawal Ben Hamou
##                                                                                                            url
## 1 http://www.dekamer.be/kvvcr/showpage.cfm?section=/depute&amp;amp;language=nl&amp;amp;cfm=cvview54.cfm?key=01189&amp;amp;lactivity=54
## 2 http://www.dekamer.be/kvvcr/showpage.cfm?section=/depute&amp;amp;language=nl&amp;amp;cfm=cvview54.cfm?key=00757&amp;amp;lactivity=54
## 3 http://www.dekamer.be/kvvcr/showpage.cfm?section=/depute&amp;amp;language=nl&amp;amp;cfm=cvview54.cfm?key=01190&amp;amp;lactivity=54
## 4 http://www.dekamer.be/kvvcr/showpage.cfm?section=/depute&amp;amp;language=nl&amp;amp;cfm=cvview54.cfm?key=01149&amp;amp;lactivity=54
## 5 http://www.dekamer.be/kvvcr/showpage.cfm?section=/depute&amp;amp;language=nl&amp;amp;cfm=cvview54.cfm?key=06592&amp;amp;lactivity=54
## 6 http://www.dekamer.be/kvvcr/showpage.cfm?section=/depute&amp;amp;language=nl&amp;amp;cfm=cvview54.cfm?key=06647&amp;amp;lactivity=54
##                 key              ln_fn    id party
## 1      aaceeilmmmry      Almaci Meyrem 01189    NA
## 2 aaabcdeeeiillnnqu Bacquelaine Daniel 00757    NA
## 3         abcejnoqs         Becq Sonja 01190    NA
## 4        beeekortuw        Beke Wouter 01149    NA
## 5       abeeillnrst       Bellens Rita 06592    NA
## 6     aaabehlmnnouw    Ben Hamou Nawal 06647    NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs get their mugshots.&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;/img/20190417/inspect.png&#34; alt=&#34;Inspecting the code of the webpage&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;The images are in folder: &lt;a href=&#34;http://www.dekamer.be/site/wwwroot/images/cv/&#34; class=&#34;uri&#34;&gt;http://www.dekamer.be/site/wwwroot/images/cv/&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# let&amp;#39;s try purrr again

download_gifs &amp;lt;- function (name, id){
  url_pic &amp;lt;- glue(&amp;quot;http://www.dekamer.be/site/wwwroot/images/cv/{id}.gif&amp;quot;)
  download.file(url_pic, destfile = glue(&amp;quot;./data/190417/{name}.gif&amp;quot;), 
                mode = &amp;quot;wb&amp;quot;)
}

#download_gifs(&amp;quot;test&amp;quot;,&amp;quot;01203&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That seems to work. Unfortunately while scraping it is not infrequent to encounter coding inconsistencies. For instance member ‚Äú00902‚Äù does not have a ‚Äú00902.gif‚Äù his is ‚Äú902.gif‚Äù. Dirty data alert üö®, shame on you webmaster üòâ.&lt;/p&gt;
&lt;p&gt;So sometimes the 0 is used and sometimes it is just the value without leading 0. One possible solution is to split the download_gifs function in two.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download_gifs_with_0 &amp;lt;- function (name, id){
  url_pic &amp;lt;- glue(&amp;quot;http://www.dekamer.be/site/wwwroot/images/cv/{id}.gif&amp;quot;)
  download.file(url_pic, destfile = glue(&amp;quot;./data/190417/down_1/{name}.gif&amp;quot;), 
                mode = &amp;quot;wb&amp;quot;)
}

download_gifs_no_0 &amp;lt;- function (name, id){
  id &amp;lt;- as.numeric(id)
  url_pic &amp;lt;- glue(&amp;quot;http://www.dekamer.be/site/wwwroot/images/cv/{id}.gif&amp;quot;)
  download.file(url_pic, destfile = glue(&amp;quot;./data/190417/down_2/{name}.gif&amp;quot;), 
                mode = &amp;quot;wb&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trying to simplify the use of the purrr function ‚Äòsafely‚Äô, by Lionel Henry who I thank for his work &amp;amp; &lt;a href=&#34;https://www.youtube.com/watch?v=-v1tp41kizk&#34;&gt;presentation&lt;/a&gt; at the UseR2018 conference in Budapest.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dir.create(&amp;quot;./data/190417/down_1&amp;quot;)
map2(.x = names$ln_fn, .y = names$id, safely(.f = download_gifs_with_0, otherwise = NULL))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So using ‚Äòsafely‚Äô the error are being skipped and we managed to download how many files?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(list.files(&amp;quot;./data/190417/down_1&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 160&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;160&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Only few missing. Let‚Äôs use the other function.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dir.create(&amp;quot;./data/190417/down_2&amp;quot;)
map2(.x = names$ln_fn, .y = names$id, safely(.f = download_gifs_no_0, otherwise = NULL))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(list.files(&amp;quot;./data/190417/down_2&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 96&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;96&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Hmm so now we have too many pictures (and the ones with no leading 0 seem older). See the aging of Mr Calvo:
&lt;center&gt;
&lt;img src=&#34;/img/20190417/Calvo%20Kristof_young.gif&#34; alt=&#34;Young Mr Calvo&#34; /&gt; &lt;img src=&#34;/img/20190417/Calvo%20Kristof_06128_old.gif&#34; alt=&#34;Old Mr Calvo&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/center&gt;
&lt;p&gt;Whose pics were additionally obtained?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new &amp;lt;- list.files(&amp;quot;./data/190417/down_1&amp;quot;)
old &amp;lt;- list.files(&amp;quot;./data/190417/down_2&amp;quot;)
new_pics &amp;lt;- setdiff(old, new)
new_pics&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Chabot Jacques.gif&amp;quot;       &amp;quot;Claerhout Sarah.gif&amp;quot;     
##  [3] &amp;quot;Crusni√®re St√©phane.gif&amp;quot;   &amp;quot;Dallemagne Georges.gif&amp;quot;  
##  [5] &amp;quot;Devin Laurent.gif&amp;quot;        &amp;quot;Gabri√´ls Katja.gif&amp;quot;      
##  [7] &amp;quot;Galant Isabelle.gif&amp;quot;      &amp;quot;Gustin Luc.gif&amp;quot;          
##  [9] &amp;quot;Hufkens Renate.gif&amp;quot;       &amp;quot;Janssens Dirk.gif&amp;quot;       
## [11] &amp;quot;Klaps Johan.gif&amp;quot;          &amp;quot;Miller Richard.gif&amp;quot;      
## [13] &amp;quot;Raskin Wouter.gif&amp;quot;        &amp;quot;Scourneau Vincent.gif&amp;quot;   
## [15] &amp;quot;Van Hoof Els.gif&amp;quot;         &amp;quot;Van Peteghem Vincent.gif&amp;quot;
## [17] &amp;quot;Vanden Burre Gilles.gif&amp;quot;  &amp;quot;Vuye Hendrik.gif&amp;quot;        
## [19] &amp;quot;Wilm√®s Sophie.gif&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice guy, Georges. Recently became grandfather again.&lt;/p&gt;
&lt;p&gt;So are we missing some?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fileslist &amp;lt;- list.files(&amp;quot;./data/190417/&amp;quot;, pattern = &amp;quot;*.gif&amp;quot;)
names_list &amp;lt;- gsub(&amp;quot;.gif&amp;quot;,&amp;quot;&amp;quot;,fileslist)
setdiff(names_list, names$ln_fn)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## character(0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a picture of all of them. üòé&lt;/p&gt;
&lt;p&gt;A collage of their pictures will give us a nice overview.&lt;/p&gt;
&lt;p&gt;Need to rename them for the magick package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setwd(&amp;quot;./data/190417/patch_rep&amp;quot;)
file.rename(list.files(), 
            paste0(&amp;quot;g_&amp;quot;, 1:179,&amp;quot;.gif&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs resize them for good measure.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;resize_player &amp;lt;- function(x){
  img &amp;lt;- image_scale(image_read(x), &amp;quot;145x190!&amp;quot;)
  image_write(img, x)        
}

player_pics &amp;lt;- list.files(&amp;quot;./data/190417/patch_rep/&amp;quot;, full.names = TRUE)

map(player_pics, resize_player)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create columns&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dir.create(&amp;quot;./data/190417/cols_rep&amp;quot;)

getwd()
files &amp;lt;- dir(&amp;quot;data/190417/patch_rep&amp;quot;, full.names = TRUE)
set.seed(1)
files &amp;lt;- sample(files, length(files)-2) # 176 will make a nice patch
gmp::factorize(length(files)-2)

no_rows &amp;lt;- 11
no_cols &amp;lt;- 16

make_column &amp;lt;- function(i, files, no_rows){
  image_read(files[(i*no_rows+1):((i+1)*no_rows)]) %&amp;gt;%
  image_append(stack = TRUE) %&amp;gt;%
    image_write(paste0(&amp;quot;cols/&amp;quot;, i, &amp;quot;.jpg&amp;quot;))
}

fun &amp;lt;- function(i, files, no_rows){
  image_read(files[(i*no_rows+1):((i+1)*no_rows)]) %&amp;gt;%
  image_append(stack = TRUE) %&amp;gt;%
    image_write(paste0(&amp;quot;./data/190417/cols_rep/&amp;quot;, i, &amp;quot;.jpg&amp;quot;))
}

 #could not really make map function ;-(

 for(i in (0:(no_cols-1))) {
 fun(i, files, no_rows)
 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we have the columns. Still need to bind them together.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getwd()

x &amp;lt;- image_read(dir(&amp;quot;.data/190417/cols_rep/&amp;quot;, full.names = TRUE))

img &amp;lt;- image_read(dir(&amp;quot;data/190417/cols_rep/&amp;quot;, full.names = TRUE)) %&amp;gt;%
image_append(stack = FALSE) 

setwd(&amp;quot;./files/20190417&amp;quot;)
getwd()
image_write(img,&amp;quot;2019-04-17-faces_of_54.jpg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;center&gt;
&lt;img src=&#34;/img/20190417/2019-04-17-faces_of_54.jpg&#34; alt=&#34;reps 54&#34; width=&#34;800&#34; height=&#34;800&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;Looking at the picture I will let you judge how diverse the picture looks. Less diverse than our national soccer team, that is for sure. But those two groups are indeed two very small and different samples of Belgians.&lt;/p&gt;
&lt;p&gt;Wondering what the 55 legislature will look like. Will keep you posted.&lt;/p&gt;
&lt;p&gt;But wait a minute. Did I say Belgian national soccer teams? Hold my beer.&lt;/p&gt;
&lt;p&gt;Analyzing the Red Devil‚Äôs website code, it appears the pictures are to be found in an aws bucket s3 folder.&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;/img/20190417/Eden.png&#34; alt=&#34;Inspecting the code of the webpage&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;Downloading the pictures of the men:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for(i in (1:7000)){
  
  url_pic &amp;lt;-glue(&amp;quot;https://belgianfootball.s3.eu-central-1.amazonaws.com/&amp;quot;,
                 &amp;quot;s3fs-public/rbfa/img/players/internationals/football/men/{i}.jpg&amp;quot;)
  
  res &amp;lt;- try(download.file(url_pic, 
                           destfile = glue(&amp;quot;./content/post/data/190417down_m/{i}.jpg&amp;quot;), 
                           mode = &amp;quot;wb&amp;quot;))
  if(inherits(res, &amp;quot;try-error&amp;quot;))
  {
    next
  }
  download.file(url_pic, destfile = glue(&amp;quot;./content/post/data/190417down_m/{i}.jpg&amp;quot;), 
                mode = &amp;quot;wb&amp;quot;)
  }


# clean the folder of empty files:

all_files &amp;lt;- dir(&amp;quot;./content/post/data/190417down_m/&amp;quot;, 
                 recursive = TRUE, full.names = TRUE)
erase &amp;lt;- all_files[file.info(all_files)[[&amp;quot;size&amp;quot;]]&amp;lt; 4200]

## Remove empty files
unlink(erase, recursive=TRUE, force=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next is downloading the pictures of the women:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for(i in (1:7000)){
  
  url_pic &amp;lt;-glue(&amp;quot;https://belgianfootball.s3.eu-central-1.amazonaws.com/&amp;quot;,
                 &amp;quot;s3fs-public/rbfa/img/players/internationals/football/women/{i}.jpg&amp;quot;)
  
  res &amp;lt;- try(download.file(url_pic, destfile = glue(&amp;quot;./content/post/data/190417down_w/{i}.jpg&amp;quot;), 
                           mode = &amp;quot;wb&amp;quot;))
  if(inherits(res, &amp;quot;try-error&amp;quot;))
  {
    next
  }
  download.file(url_pic, destfile = glue(&amp;quot;./content/post/data/190417down_w/{i}.jpg&amp;quot;), 
                mode = &amp;quot;wb&amp;quot;)
  }

# clean the folder of smaller files:

all_files &amp;lt;- dir(&amp;quot;./content/post/data/190417down_w/&amp;quot;, recursive = TRUE, full.names = TRUE)
erase &amp;lt;- all_files[file.info(all_files)[[&amp;quot;size&amp;quot;]]&amp;lt; 4200]
## Remove empty files
unlink(erase, recursive=TRUE, force=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are now 687 pictures of national soccer players; 418 men and 269 women. Most of these pictures seem to be recent, but there is no date tag or something similar. Overall, they seem fairly recent.&lt;/p&gt;
&lt;p&gt;Sampling 176 of them:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# renaming files, so we do not have the same file names between men and women

setwd(&amp;quot;./data/190417down_m/&amp;quot;)
length(list.files())
file.rename(list.files(), paste0(&amp;quot;m_&amp;quot;, 1:418,&amp;quot;.jpg&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Merging men and women.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;men_files &amp;lt;- list.files(&amp;quot;./data/190417down_m/&amp;quot;, recursive = TRUE, full.names = TRUE)
women_files &amp;lt;- list.files(&amp;quot;./data/190417down_w/&amp;quot;, recursive = TRUE, full.names = TRUE)

player_files &amp;lt;- c(men_files, women_files)
set.seed(42)
sampled_files &amp;lt;- sample(player_files, 176)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Making the same patchwork&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dir.create(&amp;quot;./data/190417/patch&amp;quot;)

lapply(sampled_files, function(x) file.copy(x,
                                        paste(&amp;quot;./data/190417/patch&amp;quot;,basename(x), 
                                              sep = &amp;quot;/&amp;quot;), 
                                        recursive = FALSE,  copy.mode = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the pictures need to have the same size (170x250 pixel)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;resize_player &amp;lt;- function(x){
  img &amp;lt;- image_scale(image_read(x), &amp;quot;170x250!&amp;quot;)
  image_write(img, x)        
}

player_pics &amp;lt;- list.files(&amp;quot;./data/190417/patch/&amp;quot;, full.names = TRUE)

map(player_pics, resize_player)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dir.create(&amp;quot;./data/190417/cols&amp;quot;)

getwd()
files &amp;lt;- dir(&amp;quot;data/190417/patch&amp;quot;, full.names = TRUE)
set.seed(1)
files &amp;lt;- sample(files, length(files))
gmp::factorize(length(files))

no_rows &amp;lt;- 11
no_cols &amp;lt;- 16

make_column &amp;lt;- function(i, files, no_rows){
  image_read(files[(i*no_rows+1):((i+1)*no_rows)]) %&amp;gt;%
  image_append(stack = TRUE) %&amp;gt;%
    image_write(paste0(&amp;quot;cols/&amp;quot;, i, &amp;quot;.jpg&amp;quot;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fun &amp;lt;- function(i, files, no_rows){
  image_read(files[(i*no_rows+1):((i+1)*no_rows)]) %&amp;gt;%
  image_append(stack = TRUE) %&amp;gt;%
    image_write(paste0(&amp;quot;./data/190417/cols/&amp;quot;, i, &amp;quot;.jpg&amp;quot;))
}

for(i in (0:(no_cols-1))) {
fun(i, files, no_rows)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;img &amp;lt;- image_read(dir(&amp;quot;data/190417/cols/&amp;quot;, full.names = TRUE)) %&amp;gt;%
image_append(stack = FALSE) 

setwd(&amp;quot;./files/20190417&amp;quot;)
getwd()
image_write(img,&amp;quot;2019-04-17-faces_of_devils.jpg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here is the patchwork of the national soccer players.&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;/img/20190417/2019-04-17-faces_of_devils.jpg&#34; alt=&#34;devils&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;So give me my tepid beer back. Here‚Äôs a sample of our national soccer players. To contrast with our parliamentarian representatives. They are obviously younger, more diverse and fitter (let‚Äôs hope). They also do not wear glasses (on the picture). And yes, I found an Easter egg. :-)&lt;/p&gt;
&lt;p&gt;Let‚Äôs get back to the parliamentarians tweets in the next post.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>am I getting slower going to work?</title>
      <link>/post/am-i-getting-slower-going-to-work/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      <author>William Bourgeois</author>
      <guid>/post/am-i-getting-slower-going-to-work/</guid>
      <description></description>
      
      <content>


&lt;p&gt;I got a bit distracted writing the last post. What I want to find out is, based on my Google location history, how fast I bike to work and if this has changed over time.&lt;/p&gt;
&lt;p&gt;Attaching libraries&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;tidyverse&amp;quot;)
library(&amp;quot;lubridate&amp;quot;)
library(&amp;quot;glue&amp;quot;)
library(&amp;quot;purrr&amp;quot;)
library(&amp;quot;ggmap&amp;quot;)
library(&amp;quot;ggplot2&amp;quot;); theme_set(theme_minimal())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And loading the data&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# the code to convert your location data to a data frame:
# see last post too
# data &amp;lt;- fromJSON(&amp;quot;./data/Location History.json&amp;quot;) # extracts a list
# locations &amp;lt;- data$locations # and the list contains a dataframe

location &amp;lt;- readRDS(&amp;quot;./data/location.rds&amp;quot;)

df &amp;lt;- location %&amp;gt;% 
  mutate(datetime = as.POSIXct(as.numeric(timestampMs)/1000, origin = &amp;quot;1970-01-01&amp;quot;)) 

df &amp;lt;- df %&amp;gt;% 
  mutate(lat   = latitudeE7/1e7,
         lon   = longitudeE7/1e7,
         time  = strftime(datetime, format = &amp;quot;%H:%M:%S&amp;quot;),
         date  = date(datetime),
         year  = year(datetime),
         month = month(datetime),
         wday  = wday(datetime))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what do we have here?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nrow(df)                   # rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 522770&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(unique(df$date))    # days&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1249&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;min(unique(df$date))       # first day&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2014-01-14&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(unique(df$date))       # last day&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2018-10-15&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plotted:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = df, aes(x = datetime, y = lat))+
 geom_line()+
  theme(axis.title.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
    labs(title=&amp;quot;commuting slower?&amp;quot;,
       subtitle = &amp;quot;latitude tracking 2014 - 2018&amp;quot;,
       x = &amp;quot;days&amp;quot;,
       y = &amp;quot;latitude&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-13-am-i-getting-slower-going-to-work_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I changed jobs in September 2014, my first working day at my current job was 15/09/2014.&lt;/p&gt;
&lt;p&gt;Let‚Äôs see which days I was working there. The dataframe ‚Äúwork‚Äù, then contains all the data points from where I am at work.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;work &amp;lt;- df %&amp;gt;% 
  filter(date &amp;gt; &amp;quot;2014-09-14&amp;quot;) %&amp;gt;%
  filter(round(lat,3) == 50.557) %&amp;gt;% 
  filter(round(lon,2) == 5.18) %&amp;gt;% # a little less accuracy on the longitude
  mutate(homework = &amp;quot;work&amp;quot;) %&amp;gt;% 
  mutate(am_pm = case_when(am(datetime) ~ &amp;quot;am&amp;quot;,
                           TRUE ~ &amp;quot;pm&amp;quot;))

length(unique(work$date)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 406&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = work, aes(x = datetime, y = lat))+
  geom_line() +
  theme(axis.title.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank())+
  labs(y = &amp;quot;latitude&amp;quot;, 
    title = &amp;quot;lattitude between home and work by day&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-13-am-i-getting-slower-going-to-work_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So that would mean that in my data set I have 406 working days and the data that comes along with it.
Since at this point I am not interested in the data from days I was not working, these can be filtered out.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;home &amp;lt;- df %&amp;gt;%
  filter(round(lat,3) != 50.557) %&amp;gt;% 
  filter(round(lon,2) != 5.18) %&amp;gt;%
  mutate(homework = &amp;quot;not_work&amp;quot;) %&amp;gt;% 
  filter(date %in%(unique(work$date))) %&amp;gt;% 
  mutate(am_pm = case_when(am(datetime) ~ &amp;quot;am&amp;quot;,
                           TRUE ~ &amp;quot;pm&amp;quot;))

home_work &amp;lt;- rbind(home, work) %&amp;gt;% 
  arrange(datetime)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What days at work got tracked?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(unique(home_work$date)) # workdays&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 406&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;min(unique(home_work$date))    # first day&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2014-09-15&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(unique(home_work$date))    # last day&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2018-07-03&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To calculate the time of my daily commute I have to find the time between I last was at home and the time I arrived at work.&lt;/p&gt;
&lt;p&gt;The latitude changes during a typical working day look like this (although this one is particularly boring üòí).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;day &amp;lt;- df %&amp;gt;% 
  filter(date == &amp;quot;2014-12-23&amp;quot;) 

ggplot(data = day, aes(x = datetime, y = lat)) +
  geom_line() +
  theme(axis.title.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
  labs(y = &amp;quot;latitude&amp;quot;, 
    title = &amp;quot;23/12/2014 - another day at the office&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-13-am-i-getting-slower-going-to-work_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And if we look at the first hours of the day and arriving at work:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;day &amp;lt;- df %&amp;gt;% 
  filter(date == &amp;quot;2014-12-23&amp;quot;) %&amp;gt;% 
  filter(time &amp;gt; &amp;quot;07:00:00&amp;quot;,
         time &amp;lt; &amp;quot;09:30:00&amp;quot;)

ggplot(data = day, aes(x = datetime, y = lat)) +
  geom_line() +
  theme(axis.title.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
  labs(y = &amp;quot;Latitude&amp;quot;, 
    title = &amp;quot;23/12/2014 - zooming in on arriving at work&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-13-am-i-getting-slower-going-to-work_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So the time spent in the commute is the time first at around 50.560 latitude (itw) minus the last time at around 50.580 latitude (oth), and that for the time period of let‚Äôs say between 7am and 9.30am.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oth &amp;lt;- day %&amp;gt;% 
  filter(lat &amp;lt; 50.5756) %&amp;gt;% 
  filter(time == min(time)) %&amp;gt;% 
  select(time) %&amp;gt;% 
  mutate(time = as.POSIXct(time, format = &amp;quot;%H:%M:%S&amp;quot;))

itw &amp;lt;- day %&amp;gt;% 
  filter(lat &amp;lt; 50.558) %&amp;gt;% 
  filter(time == min(time)) %&amp;gt;% 
  select(time)%&amp;gt;% 
  mutate(time = as.POSIXct(time, format = &amp;quot;%H:%M:%S&amp;quot;))

commute_time &amp;lt;- difftime(itw$time,oth$time, units = c(&amp;quot;mins&amp;quot;)) #9.93 minutes
class(commute_time)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;difftime&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.numeric(commute_time)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.083333&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2 minutes is a bit too fast. The problem is that the first time out of the house, on that particular date, is recorded pretty late. So the last time in the house (ith) is the one that is needed. Also because starting around 30/01/2016 a strange pattern is emerging&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;day &amp;lt;- home_work %&amp;gt;%
  filter(date == &amp;quot;2018-07-03&amp;quot;) %&amp;gt;% 
  filter(time &amp;gt; &amp;quot;08:00:00&amp;quot;,
         time &amp;lt; &amp;quot;09:30:00&amp;quot;)

ggplot(data = day, aes(x = datetime, y = lat)) +
  geom_line() +
  theme(axis.title.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
  labs(y = &amp;quot;latitude&amp;quot;, 
    title = &amp;quot;&amp;#39;bilocation&amp;#39; pattern&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-13-am-i-getting-slower-going-to-work_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And that pattern did not happen before February 2016. For instance ‚Äú2016-01-08‚Äù gives.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;day &amp;lt;- home_work %&amp;gt;%
  filter(date == &amp;quot;2016-01-08&amp;quot;) %&amp;gt;% 
  filter(time &amp;gt; &amp;quot;07:30:00&amp;quot;,
         time &amp;lt; &amp;quot;09:30:00&amp;quot;)

ggplot(data = day, aes(x = datetime, y = lat)) +
  geom_line()+
  theme(axis.title.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
  labs(y = &amp;quot;latitude&amp;quot;, 
    title = &amp;quot;before February 2016&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-13-am-i-getting-slower-going-to-work_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A collegue came up with the hypothesis that it was my computer at home that was messing up my phone location data, which was a great idea, but in fact it was my tablet.&lt;/p&gt;
&lt;p&gt;I bought it on 30/01/2016, and both it‚Äôs location data and my phone location data are merged ever since. Which is kind of surprising or rather dissapointing.&lt;/p&gt;
&lt;p&gt;Google is serving us dirty data in the location history. I cannot imagine it does not distinguish between my devises.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oth &amp;lt;- day %&amp;gt;% 
  filter(lat &amp;lt; 50.5756) %&amp;gt;% 
  filter(time == min(time)) %&amp;gt;% 
  select(time) %&amp;gt;% 
  mutate(time = as.POSIXct(time, format = &amp;quot;%H:%M:%S&amp;quot;))

# the last time in the house
ith &amp;lt;- day %&amp;gt;% 
  mutate(time = as.POSIXct(time, format = &amp;quot;%H:%M:%S&amp;quot;)) %&amp;gt;% 
  filter(time &amp;lt; oth$time) %&amp;gt;% 
  filter(time == max(time))%&amp;gt;% 
  select(time) %&amp;gt;% 
  mutate(time = as.POSIXct(time, format = &amp;quot;%H:%M:%S&amp;quot;))


itw &amp;lt;- day %&amp;gt;% 
  filter(lat &amp;lt; 50.557) %&amp;gt;% 
  filter(time == min(time)) %&amp;gt;% 
  select(time)%&amp;gt;% 
  mutate(time = as.POSIXct(time, format = &amp;quot;%H:%M:%S&amp;quot;))

commute_time &amp;lt;- difftime(itw$time,ith$time, units = c(&amp;quot;mins&amp;quot;)) #9.93 minutes
class(commute_time)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;difftime&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.numeric(commute_time)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 44.48333&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;44 minutes on the other hand seems like a lot. But the data and calculations look correct to me. One explanation could be that sometimes there is a big delay in reporting the arrival time. Like on April 17 2015, where arrival was recorded after 12am.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;day &amp;lt;- df %&amp;gt;% 
  filter(date == &amp;quot;2015-04-17&amp;quot;) 

ggplot(data = day, aes(x = datetime, y = lat)) +
  geom_line() + 
  theme(axis.title.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
  labs(y = &amp;quot;latitude&amp;quot;, 
    title = &amp;quot;April 17 2015&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-13-am-i-getting-slower-going-to-work_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So it‚Äôs time to do some more data cleaning, and select dates that have data from both work and home between 7 and 9:30am.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;keep_dates &amp;lt;- home_work %&amp;gt;% 
  filter(time &amp;gt; &amp;quot;07:00:00&amp;quot;,
         time &amp;lt; &amp;quot;09:30:00&amp;quot;) %&amp;gt;%
  plyr::count(c(&amp;#39;date&amp;#39;, &amp;#39;homework&amp;#39;)) %&amp;gt;% 
  spread(homework, freq) %&amp;gt;% 
  filter(work &amp;gt; 0) %&amp;gt;% 
  select(date)
glue(&amp;quot;so there are now {nrow(keep_dates)} days to be analysed&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## so there are now 336 days to be analysed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs define a function to do it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# building the function
get_time &amp;lt;- function(x_date){
  day &amp;lt;- home_work %&amp;gt;%
    filter(date ==  x_date) %&amp;gt;% 
    filter(time &amp;gt; &amp;quot;07:30:00&amp;quot;,
           time &amp;lt; &amp;quot;09:30:00&amp;quot;)
  oth &amp;lt;- day %&amp;gt;% 
    filter(lat &amp;lt; 50.5756) %&amp;gt;% 
    filter(time == min(time)) %&amp;gt;% 
    select(time) %&amp;gt;% 
    mutate(time = as.POSIXct(time, format = &amp;quot;%H:%M:%S&amp;quot;)) %&amp;gt;% 
    slice(1) # making sure one value is returned
  
  ith &amp;lt;- day %&amp;gt;% 
    mutate(time = as.POSIXct(time, format = &amp;quot;%H:%M:%S&amp;quot;)) %&amp;gt;% 
    filter(time &amp;lt; oth$time) %&amp;gt;% 
    filter(time == max(time))%&amp;gt;% 
    select(time) %&amp;gt;% 
    mutate(time = as.POSIXct(time, format = &amp;quot;%H:%M:%S&amp;quot;))
  
  if(nrow(ith) == 0) {ith &amp;lt;- oth} 
  
  itw &amp;lt;- day %&amp;gt;% 
    filter(lat &amp;lt; 50.558) %&amp;gt;% 
    filter(time == min(time)) %&amp;gt;% 
    select(time)%&amp;gt;% 
    mutate(time = as.POSIXct(time, format = &amp;quot;%H:%M:%S&amp;quot;))%&amp;gt;% 
    slice(1) # making sure one value is returned
  
  x &amp;lt;- difftime(itw$time,ith$time, units = c(&amp;quot;mins&amp;quot;))
  x &amp;lt;- round(as.numeric(x),2)
  return(x)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I had a struggle with purrr‚Äôs map_df() , but map_dbl() also does the trick&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;result &amp;lt;- map_dbl(keep_dates$date, get_time) %&amp;gt;% 
  as.data.frame() %&amp;gt;% 
  rename(&amp;quot;minutes&amp;quot; = &amp;quot;.&amp;quot;) %&amp;gt;% 
  cbind(keep_dates) %&amp;gt;% 
  select(date, minutes)

head(result)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         date minutes
## 1 2014-09-16   18.53
## 2 2014-09-18   10.45
## 3 2014-09-24   28.02
## 4 2014-09-26   32.77
## 5 2014-09-30    9.30
## 6 2014-10-01   20.92&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(result$minutes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 100.95&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;min(result$minutes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.13&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(result, aes(x = date, y = minutes)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;)+ 
  scale_y_continuous(limits = c(0, 65)) +
  labs(y = &amp;quot;minutes to work&amp;quot;, 
    title = &amp;quot;2015 - 2018&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-13-am-i-getting-slower-going-to-work_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2018 seems to have the cleanest data at this point. I sometimes walk to work or take the bus or the car. All of these take me more time than biking to work. There are five trafic lights on the way and I tend to stop for trafic lights when they are red. So the trafic ligths might explain much of the variance.&lt;/p&gt;
&lt;p&gt;A bike ride would not take more than twenty minutes, and surely not less than 5.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;r_2018 &amp;lt;- result %&amp;gt;% 
  filter(year(date) == 2018) %&amp;gt;% 
  filter(minutes &amp;lt; 20,
         minutes &amp;gt; 5)

ggplot(r_2018, aes(x = date, y = minutes)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  labs(y = &amp;quot;minutes to work&amp;quot;, 
    title = &amp;quot;2018&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-13-am-i-getting-slower-going-to-work_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(mean(r_2018$minutes),2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 12.18&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that would then be around 12 minutes. I still need to time my current commutes for a while to see if I got slower.&lt;/p&gt;
&lt;p&gt;I hoped for a bit cleaner data and the possibility to easyly compare the evolution of the time spent commuting over several years. But I‚Äôll take the 12.18 minutes for now.&lt;/p&gt;
&lt;p&gt;Finally I wanted to share the ‚Äúpat√©s‚Äù with you. Not often enough part of the team takes a break and walks around the office block, and those we call doing a ‚Äúpat√©‚Äù (= block). They say walking meetings are in these days.&lt;/p&gt;
&lt;p&gt;I was looking to see how many of them we are doing, but as you will see below the datapoints are mostly centered on our office building itself. And I cannot see how I can construct a pattern around it representing the ‚Äúpat√©s‚Äù.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;secrets &amp;lt;- readRDS(&amp;quot;~/R/geo/secret/secrets.rds&amp;quot;)
key &amp;lt;- secrets$key[1]
register_google(key = key)

zoom &amp;lt;- get_map(location = c(lon = 4.306, lat = 50.8545), zoom = 19, maptype = &amp;quot;satellite&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Source : https://maps.googleapis.com/maps/api/staticmap?center=50.8545,4.306&amp;amp;zoom=19&amp;amp;size=640x640&amp;amp;scale=2&amp;amp;maptype=satellite&amp;amp;language=en-EN&amp;amp;key=xxx&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- readRDS(&amp;quot;./data/location_509.rds&amp;quot;) %&amp;gt;% 
  filter(year != 2017)

ggmap(zoom) + 
  geom_point(data = df, aes(x = lon, y = lat),
             alpha = 0.7, color = &amp;quot;#FC4E07&amp;quot;, size = .8) + 
  facet_wrap(~year) +
  theme(legend.position = &amp;quot;right&amp;quot;) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
  labs(
    x = &amp;quot;Longitude&amp;quot;, 
    y = &amp;quot;Latitude&amp;quot;, 
    title = &amp;quot;always happy @work&amp;quot;,
    caption = &amp;quot;\n removed 2017 because there were few data points.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-13-am-i-getting-slower-going-to-work_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It seems to me all the data is a bit off. 2014 to 2016 a bit or a lot shifted to the left, and 2018 just a tad too much to the right.&lt;/p&gt;
&lt;p&gt;But still. Welcome to the panopticon.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>google location tracking</title>
      <link>/post/google-location-tracking/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      <author>William Bourgeois</author>
      <guid>/post/google-location-tracking/</guid>
      <description></description>
      
      <content>


&lt;p&gt;Biking to work this week I was wondering if I had not gotten slower and if my commute was not taking longer than before. Not being a regular user of Strava or a similar app, I wondered if I could find an answer to that question using my Google location history.&lt;/p&gt;
&lt;p&gt;So I downloaded the data, that comes in json format, and had a go at it. You can &lt;a href=&#34;https://takeout.google.com/settings/takeout&#34;&gt;download&lt;/a&gt; your Google location data from your Google account.&lt;/p&gt;
&lt;p&gt;Let‚Äôs load the data and attach the libraries that are needed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;jsonlite&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)
library(&amp;quot;lubridate&amp;quot;)
library(&amp;quot;ggplot2&amp;quot;)
library(&amp;quot;ggmap&amp;quot;)      # devtools::install_github(&amp;quot;dkahle/ggmap&amp;quot;)
library(&amp;quot;glue&amp;quot;)
library(&amp;quot;emo&amp;quot;)        # devtools::install_github(&amp;quot;hadley/emo&amp;quot;)
library(&amp;quot;viridis&amp;quot;)    # install.packages(&amp;quot;viridis&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getwd()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;C:/Users/William/Documents/R/blogs/content/post&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- fromJSON(&amp;quot;./data/20190330/Location History.json&amp;quot;) # extracts a list
locations &amp;lt;- data$locations # and the list contains a dataframe
rm(data)  # no need for this anymore&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;a href=&#34;https://shiring.github.io/maps/2016/12/30/Standortverlauf_post&#34;&gt;blogpost&lt;/a&gt; from Shirin Glander was super useful and I am shamelessly stealing some of her great ideas. The time stamp needs to be converted to be readable.
The field heading seems to be in degrees, is velocity in mph? And I don‚Äôt know where the altitude reading comes from (maybe not a pressure sensor but gps triangulation?, ground elevation?).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- locations %&amp;gt;% 
  mutate(datetime = as.POSIXct(as.numeric(timestampMs)/1000, origin = &amp;quot;1970-01-01&amp;quot;)) 

sort(unique(df$heading)) #naught to 360&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
##  [18]  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33
##  [35]  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50
##  [52]  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67
##  [69]  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84
##  [86]  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101
## [103] 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118
## [120] 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135
## [137] 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152
## [154] 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169
## [171] 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186
## [188] 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203
## [205] 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220
## [222] 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237
## [239] 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254
## [256] 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271
## [273] 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288
## [290] 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
## [307] 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322
## [324] 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339
## [341] 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356
## [358] 357 358 359&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Is the velocity in miles per hour ?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unique(df$velocity)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] NA  0  1  3  5 14 28  2  4  7  8 25 29 15 16 19 10  6  9 11 13 12 21
## [24] 24 20 17 26 27 30 23 22 18 31 33 32 34 35 36 82 83 77 74 67 37&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Does that mean that I ever broke the speed limit? We‚Äôre not supposed to drive faster than 120 km/h in Belgium üöì!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fine &amp;lt;- paste(round(max(unique(df$velocity), na.rm = TRUE)*1.609344,0),&amp;quot;km!&amp;quot;)

glue(&amp;quot;{fine} üò± üò± üò±&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 134 km! üò± üò± üò±&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Could this information get me fined? Or will this type information be used in the future to determine guilt?
Are the police allowed to access this type of Google data to for instance find perps of hit &amp;amp; runs?&lt;/p&gt;
&lt;p&gt;The data frame also contains lists with times stamps and estimations of activity at that time stamp.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(df$activity[80])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 1
##  $ :&amp;#39;data.frame&amp;#39;:    1 obs. of  2 variables:
##   ..$ timestampMs: chr &amp;quot;1395248054966&amp;quot;
##   ..$ activity   :List of 1
##   .. ..$ :&amp;#39;data.frame&amp;#39;:  5 obs. of  2 variables:
##   .. .. ..$ type      : chr [1:5] &amp;quot;ON_FOOT&amp;quot; &amp;quot;STILL&amp;quot; &amp;quot;IN_VEHICLE&amp;quot; &amp;quot;UNKNOWN&amp;quot; ...
##   .. .. ..$ confidence: int [1:5] 49 20 16 10 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So if I read this correctly this object is a list of one, containing a dataframe with another two objects, a timestamp and another list of one, that contains a dataframe with 5 observations and two variables: the type of activity and the probability calculated for it. So on timestamp ‚Äú1395248054966‚Äù (= 2014-03-19 17:54:14 CET) I had a 49% probability to be on foot.&lt;/p&gt;
&lt;p&gt;And then there is also a measure of altitude. Is it in feet or meters, and where do the negative numbers come from? Maybe these data points should be analysed a bit later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(unique(df$altitude)) # ? what sensor does it use?&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  int [1:633] NA 27 41 38 42 60 16 57 63 49 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(unique(df$altitude))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&amp;#39;s 
## -1299.0   108.8   266.5   274.0   435.2  2983.0       1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs plot some data on maps.&lt;/p&gt;
&lt;p&gt;First some additional date prep.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- df %&amp;gt;% 
  mutate(lat   = latitudeE7/1e7,
         lon   = longitudeE7/1e7,
         time  = strftime(datetime, format = &amp;quot;%H:%M:%S&amp;quot;),
         date  = date(datetime),
         year  = year(datetime),
         month = month(datetime),
         wday  = wday(datetime))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Working with ggmap is pretty straightforward, but you need to obtain an api key from google and enable billing. More info &lt;a href=&#34;https://developers.google.com/maps/documentation/embed/get-api-key&#34;&gt;here&lt;/a&gt;. For obvious reasons you need to keep your key secret and safe, but additionally you can restrict the calls to your &lt;a href=&#34;https://console.developers.google.com/apis/credentials?project=grounded-block-178714&amp;amp;folder&amp;amp;organizationId&#34;&gt;IP&lt;/a&gt;. Will have a go at OSM in a future post, promised.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;secrets &amp;lt;- readRDS(&amp;quot;~/R/geo/secret/secrets.rds&amp;quot;)
key &amp;lt;- secrets$key[1]
register_google(key = key)

belgium &amp;lt;- get_map(location = &amp;#39;Belgium&amp;#39;, zoom = 8, maptype = &amp;quot;terrain-lines&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The map coverage is called the bounding box of the map and it is an attribute of the ggmap object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bb &amp;lt;- attr(belgium, &amp;quot;bb&amp;quot;)
bb&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          ll.lat  ll.lon ur.lat   ur.lon
## bottom 49.37082 2.71487 51.607 6.230495&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- df %&amp;gt;% 
  filter(lat &amp;lt; 51.607 &amp;amp; lat &amp;gt; 49.37082,
         lon &amp;gt; 2.71487 &amp;amp; lon &amp;lt; 6.20495)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggmap(belgium, maptype = &amp;quot;terrain-lines&amp;quot;) + 
  geom_point(data = x, aes(x = lon, y = lat),
             alpha = 0.1, color = &amp;quot;#FC4E07&amp;quot;, size = .65) + 
  theme(legend.position = &amp;quot;right&amp;quot;) + 
  labs(
    x = &amp;quot;Longitude&amp;quot;, 
    y = &amp;quot;Latitude&amp;quot;, 
    title = &amp;quot;Location history data points in Belgium&amp;quot;,
    caption = &amp;quot;\nA simple point plot shows recorded positions.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-30-google-location-tracking_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Orange lines are my movements. A rock festival to the east of Antwerp, some visits to the coast, to my home city Ghent, a marriage in the west, biking and text mining in Leuven, and hikes in the woods of the south. Looks about right. And yes, I live and work in Brussels.&lt;/p&gt;
&lt;p&gt;So let‚Äôs take a closer look at Brussels.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;brussels &amp;lt;- get_map(location = &amp;#39;Brussels&amp;#39;, zoom = 12, maptype = &amp;quot;terrain-lines&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bb &amp;lt;- attr(brussels, &amp;quot;bb&amp;quot;)
bb&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          ll.lat   ll.lon   ur.lat   ur.lon
## bottom 50.78082 4.242029 50.91955 4.461756&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# just keeping data from brussels

x &amp;lt;- df %&amp;gt;% 
  filter(lat &amp;lt; bb$ur.lat &amp;amp; lat &amp;gt; bb$ll.lat,
         lon &amp;gt; bb$ll.lon &amp;amp; lon &amp;lt; bb$ur.lon)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggmap(brussels) + 
  geom_point(data = x, aes(x = lon, y = lat),
             alpha = 0.5, color = &amp;quot;#FC4E07&amp;quot;, size = .65) + 
  theme(legend.position = &amp;quot;right&amp;quot;) + 
  labs(
    x = &amp;quot;Longitude&amp;quot;, 
    y = &amp;quot;Latitude&amp;quot;, 
    title = &amp;quot;Location history data points in Brussels&amp;quot;,
    caption = &amp;quot;\nA simple point plot shows recorded positions.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-30-google-location-tracking_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let‚Äôs see how much we can zoom in.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;zoom &amp;lt;- get_map(location = c(lon = 4.349078, lat = 50.850586), zoom = 16, maptype = &amp;quot;satellite&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bb &amp;lt;- attr(zoom, &amp;quot;bb&amp;quot;)
x &amp;lt;- df %&amp;gt;% 
  filter(lat &amp;lt; bb$ur.lat &amp;amp; lat &amp;gt; bb$ll.lat,
         lon &amp;gt; bb$ll.lon &amp;amp; lon &amp;lt; bb$ur.lon)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggmap(zoom) + 
 geom_point(data = x, aes(x = lon, y = lat),
             alpha = 0.7, color = &amp;quot;#FC4E07&amp;quot;, size = .85) + 
  theme(legend.position = &amp;quot;right&amp;quot;) + 
  labs(
    x = &amp;quot;Longitude&amp;quot;, 
    y = &amp;quot;Latitude&amp;quot;, 
    title = &amp;quot;Location history data points in central Brussels&amp;quot;,
    caption = &amp;quot;\n favorite haunts.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-30-google-location-tracking_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So that is pretty consistent with my favorite downtown haunts. Let‚Äôs pan out and add the number of seconds from 6 am in the day to the dataframe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;period_to_seconds(hms(&amp;quot;06:00:00&amp;quot;)) # seconds at 6am&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 21600&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;period_to_seconds(hms(&amp;quot;23:59:59&amp;quot;)) # seconds just before midnight&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 86399&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- df %&amp;gt;% 
  mutate(from_dawn = 
           case_when((period_to_seconds(hms(time)) &amp;gt; 21600) ~ 
                       (period_to_seconds(hms(time))-21600),
                     TRUE ~ (period_to_seconds(hms(time))+64799)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now there is a value (from_dawn) that is equal to 0 at six am and continues to increase until just before six. Easy to convert to hours starting from six am. Values seem higher in the center of the city. ‚ÄúIt‚Äôs six o‚Äôclock in the morning, do you know where your parents are?‚Äù üåî&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(stringsAsFactors = T)

bb &amp;lt;- attr(brussels, &amp;quot;bb&amp;quot;)
x &amp;lt;- df %&amp;gt;% 
  filter(lat &amp;lt; bb$ur.lat &amp;amp; lat &amp;gt; bb$ll.lat,
         lon &amp;gt; bb$ll.lon &amp;amp; lon &amp;lt; bb$ur.lon) %&amp;gt;% 
  mutate(hours = from_dawn/3600)

ggmap(brussels) + 
  stat_summary_2d(geom = &amp;quot;tile&amp;quot;, bins = 100, data = x, 
                  aes(x = lon, y = lat, z = hours), alpha = 0.7) + 
  scale_fill_gradientn(colors  =  viridis(4), 
                       guide = guide_legend(title = &amp;quot;hours since 6am&amp;quot;)) +
  labs(
    x = &amp;quot;Longitude&amp;quot;, 
    y = &amp;quot;Latitude&amp;quot;, 
    title = &amp;quot;Location history data points around Brussels&amp;quot;,
    subtitle = &amp;quot;Color scale shows accuracy (low: blue, high: red)&amp;quot;,
    caption = &amp;quot;\nThis bin plot shows recorded positions 
    and their time of day&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-30-google-location-tracking_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Looking at it by year.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bb &amp;lt;- attr(brussels, &amp;quot;bb&amp;quot;)
x &amp;lt;- df %&amp;gt;%
  filter(lat &amp;lt; bb$ur.lat &amp;amp; lat &amp;gt; bb$ll.lat,
         lon &amp;gt; bb$ll.lon &amp;amp; lon &amp;lt; bb$ur.lon,
         year &amp;gt; 2014)

ggmap(brussels) + facet_wrap(~year) +
geom_point(data = x, aes(x = lon, y = lat), alpha = 0.5, color = &amp;quot;#FC4E07&amp;quot;, size = .8) + 
  theme(legend.position = &amp;quot;right&amp;quot;) + 
  labs(
    x = &amp;quot;Longitude&amp;quot;, 
    y = &amp;quot;Latitude&amp;quot;, 
    title = &amp;quot;Location history data points in Brussels - by year &amp;quot;,
    caption = &amp;quot;\nA simple point plot shows recorded positions.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-30-google-location-tracking_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It would seem that I moved a lot in 2016 compared to the other years, but to that extent it does not look right. Let‚Äôs dig a little deeper in the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = x, aes(x = datetime, y = lat))+
  geom_line()+
  theme(axis.title.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-30-google-location-tracking_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;960&#34; /&gt;
So clearly 2015 and 2017 have much less data. In 2017 it looks like I only used location services to three or four specific places in Brussels, but it is intriguing that there seems to be data throughout the year. And this in contrast with the end of 2018 when I switched the location tracking off.&lt;/p&gt;
&lt;p&gt;Whether Google still keeps track of my whereabouts is of course another matter.&lt;/p&gt;
&lt;p&gt;I still don‚Äôt know if my commute has gotten longer. I will try to find out in a next blog post.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      <author>William Bourgeois</author>
      <guid>/about/</guid>
      <description></description>
      
      <content>&lt;p&gt;This is a &amp;ldquo;hello world&amp;rdquo; example website for the &lt;a href=&#34;https://github.com/rstudio/blogdown&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt; package. The theme was forked from &lt;a href=&#34;https://github.com/jrutheiser/hugo-lithium-theme&#34; target=&#34;_blank&#34;&gt;@jrutheiser/hugo-lithium-theme&lt;/a&gt; and modified by &lt;a href=&#34;https://github.com/yihui/hugo-lithium&#34; target=&#34;_blank&#34;&gt;Yihui Xie&lt;/a&gt;.&lt;/p&gt;
</content>
      
    </item>
    
  </channel>
</rss>