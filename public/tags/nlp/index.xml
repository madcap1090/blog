<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nlp on bad to the code</title>
    <link>/tags/nlp/</link>
    <description>Recent content in nlp on bad to the code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/madcap1090&#34;&gt;William Bourgeois&lt;/a&gt; 2019</copyright>
    <lastBuildDate>Sat, 04 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/nlp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Political ads on Facebook for the 2019 Belgian elections</title>
      <link>/post/political-ads-on-facebook-for-the-2019-belgian-elections/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/political-ads-on-facebook-for-the-2019-belgian-elections/</guid>
      <description>I was looking for a way to have the same level of analysis that is possible with the Twitter API on Facebook, but gave up after a short while. The API seems to me quite closed in terms of what information is made available by Facebook.
So I was quiet interested when I come across this blog post of Mr Schmidt not on an API for Facebook generally, but for Facebook ads.</description>
    </item>
    
    <item>
      <title>Topic modeling beer reviews</title>
      <link>/post/topic-modeling-beer-reviews/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/topic-modeling-beer-reviews/</guid>
      <description>Another tool to analyse our text data with is topic modeling. This might seem similar to the tf-idf calculations but the biggest difference in topic modeling is that here we will see if we can learn something by seeing which words tend to be used in the same reviews. While the tf-idf only looks at the occurrence of the word compared to the total occurrences of all the other words.</description>
    </item>
    
    <item>
      <title>tf_idf and beer reviews</title>
      <link>/post/tf-idf-and-beer-reviews/</link>
      <pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/tf-idf-and-beer-reviews/</guid>
      <description>We have our data now, we scraped it from the web like we showed here. How can we best start analysing it?
Maybe best by a tf-idf analysis? I like it because it is simple, but at the same time gives valuable insights both into the structure of the data (words by category) and the content (differences between categories of texts, whatever you might decide these categories to be)</description>
    </item>
    
    <item>
      <title>Beer reviews galore!</title>
      <link>/post/beer-reviews-galore/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/beer-reviews-galore/</guid>
      <description>Iâ€™ll be using some NLP tools soon, but let us first obtain texts to work with. The idea here is to construct a data frame with one row per Belgian beer and one list with all the reviews of that beer in one cell of that row. And that in order to have the data nice and tidy.
In order to do that we will create a couple of loops.</description>
    </item>
    
  </channel>
</rss>