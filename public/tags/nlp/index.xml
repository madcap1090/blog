<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nlp on bad to the code</title>
    <link>/tags/nlp/</link>
    <description>Recent content in nlp on bad to the code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/madcap1090&#34;&gt;William Bourgeois&lt;/a&gt; 2020</copyright>
    <lastBuildDate>Tue, 03 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/nlp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Topic modeling Facebook ads</title>
      <link>/post/topic-modeling-facebook-ads/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/topic-modeling-facebook-ads/</guid>
      <description>In the last two posts there was an analysis of Facebook ads of Belgian politicians or political parties. To temporary conclude the subject we will do some topic modeling on these ads.
library(&amp;quot;tidyverse&amp;quot;)library(&amp;quot;cld2&amp;quot;)library(&amp;quot;tidytext&amp;quot;)library(&amp;quot;topicmodels&amp;quot;)library(&amp;quot;qdap&amp;quot;)library(&amp;quot;gt&amp;quot;)Loading the data.
df &amp;lt;- readRDS(&amp;quot;./data/20200104/df.rds&amp;quot;)# create a doc_iddf &amp;lt;- rowid_to_column(df, &amp;quot;doc_id&amp;quot;)I think that one of the first things to do is to is to determine the languages the ads were written in.</description>
    </item>
    
    <item>
      <title>nlp on Facebooks Belgian political ads</title>
      <link>/post/nlp-on-facebooks-belgian-political-ads/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/nlp-on-facebooks-belgian-political-ads/</guid>
      <description>In the last post there was a fairly extensive analysis presented on what is possible to obtain from Facebook on political ads in Belgium. There was a fair amount of data to play with even if it took some energy and time to clean it and filter the ‘issues’ ads from the political ads.
However Facebook does not present and makes available enough data to analyse what type of deep manipulation is possible using their services.</description>
    </item>
    
    <item>
      <title>Political ads on Facebook for the 2019 Belgian elections</title>
      <link>/post/political-ads-on-facebook-for-the-2019-belgian-elections/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/political-ads-on-facebook-for-the-2019-belgian-elections/</guid>
      <description>I was looking for a way to have the same level of analysis of Facebook that is possible with the Twitter API, but gave up after a short while. The API seems to me quite closed in terms of what information is made available by Facebook.
So I was quiet interested when I come across this blog post of Mr Schmidt not on an API for Facebook generally, but for Facebook ads.</description>
    </item>
    
    <item>
      <title>Topic modeling beer reviews</title>
      <link>/post/topic-modeling-beer-reviews/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/topic-modeling-beer-reviews/</guid>
      <description>Another tool to analyse our text data with is topic modeling. This might seem similar to the tf-idf calculations but the biggest difference in topic modeling is that here we will see if we can learn something by seeing which words tend to be used in the same reviews. While the tf-idf only looks at the occurrence of the word compared to the total occurrences of all the other words.</description>
    </item>
    
    <item>
      <title>tf_idf and beer reviews</title>
      <link>/post/tf-idf-and-beer-reviews/</link>
      <pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/tf-idf-and-beer-reviews/</guid>
      <description>We have our data now, we scraped it from the web like we showed here. How can we best start analysing it?
Maybe best by a tf-idf analysis? I like it because it is simple, but at the same time gives valuable insights both into the structure of the data (words by category) and the content (differences between categories of texts, whatever you might decide these categories to be)</description>
    </item>
    
    <item>
      <title>Beer reviews galore!</title>
      <link>/post/beer-reviews-galore/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/beer-reviews-galore/</guid>
      <description>I’ll be using some NLP tools soon, but let us first obtain texts to work with. The idea here is to construct a data frame with one row per Belgian beer and one list with all the reviews of that beer in one cell of that row. And that in order to have the data nice and tidy.
In order to do that we will create a couple of loops.</description>
    </item>
    
  </channel>
</rss>
